<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.restful.dao.mapper.ApiMapper">
	<cache type="codedriver.framework.dao.cache.CodeDriverCache" flushInterval="30000" size="100"></cache>

	<select id="getApiByToken" parameterType="java.lang.String" resultType="codedriver.framework.restful.dto.ApiVo" useCache="true">
		SELECT
		`name`,
		`module_id` AS moduleId,
		`handler`,
		`username`,
		`password`,
		`config`,
		`is_active` AS isActive,
		`token`,
		`expire`,
		`description`,
		`authtype`,
		`type`,
		`qps`,
		`timeout`,
		`need_audit` AS needAudit
		FROM `api`
		WHERE
		token = #{value}
	</select>

	<select id="getApiTokenList" parameterType="codedriver.framework.restful.dto.ApiVo" resultType="java.lang.String" useCache="false">
		SELECT
		`token`
		FROM `api`
		WHERE 1=1
		<if test="moduleId != null">
			AND `module_id` = #{moduleId}
		</if>
		<if test="handler != null">
			AND `handler` = #{handler}
		</if>
		<if test="isActive != null">
			AND `is_active` = #{isActive}
		</if>
		<if test="keyword != null and keyword != ''">
			AND (`name` LIKE CONCAT('%', #{keyword}, '%') OR `token` LIKE CONCAT('%', #{keyword}, '%'))
		</if>
	</select>

	<select id="getApiListByTokenList" parameterType="java.lang.String" resultType="codedriver.framework.restful.dto.ApiVo" useCache="false">
		SELECT
		`name`,
		`module_id` AS moduleId,
		`handler`,
		`username`,
		`password`,
		`config`,
		`is_active` AS isActive,
		`token`,
		`expire`,
		`description`,
		`authtype`,
		`type`,
		`qps`,
		`timeout`,
		`need_audit` AS needAudit
		FROM `api`
		WHERE `token` IN
		<foreach collection="list" item="token" separator="," open="(" close=")">
			#{token}
		</foreach>
	</select>

	<select id="getApiAuditCount" parameterType="codedriver.framework.restful.dto.ApiAuditVo" resultType="int" useCache="false">
		SELECT
		count(`token`)
		FROM
		`api_audit`
		WHERE `token` = #{token}
	</select>

	<select id="getAllApi" resultType="codedriver.framework.restful.dto.ApiVo" useCache="true">
		SELECT
		`name`,
		`module_id` AS moduleId,
		`handler`,
		`username`,
		`password`,
		`config`,
		`is_active` AS isActive,
		`token`,
		`expire`,
		`description`,
		`authtype`,
		`type`,
		`qps`,
		`timeout`,
		`need_audit` AS needAudit
		FROM `api`
	</select>

	<select id="getApiAuditList" parameterType="codedriver.framework.restful.dto.ApiAuditVo" resultType="codedriver.framework.restful.dto.ApiAuditVo" useCache="false">
		SELECT
		`id`,
		`token`,
		`user_uuid` AS userUuid,
		(SELECT u.`user_name` from `user` u WHERE u.`uuid` = `api_audit`.`user_uuid`) AS userName,
		`authtype`,
		`server_id` AS serverId,
		`ip`,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`time_cost` AS timeCost,
		`status`,
		`param_hash` as paramHash,
		`result_hash` as resultHash,
		`error_hash` as errorHash
		FROM
		`api_audit`
		WHERE `token` = #{token}
		ORDER BY `start_time` DESC
		LIMIT #{startNum}, #{pageSize}
	</select>

	<select id="getApiVisitTimesListByTokenList" parameterType="java.lang.String" resultType="codedriver.framework.restful.dto.ApiVo" useCache="false">
		SELECT
		`token`,
		COUNT(`token`) AS visitTimes
		FROM `api_audit`
		WHERE `token` IN
		<foreach collection="list" item="token" separator="," open="(" close=")">
			#{token}
		</foreach>
		GROUP BY `token`
	</select>

	<select id="getApiAuditDetailByHash" parameterType="java.lang.String" resultType="java.lang.String" useCache="false">
		SELECT
		`content`
		FROM
		`api_audit_detail`
		WHERE hash = #{value}
	</select>

	<select id="getApiAccessCountByTokenList" parameterType="java.lang.String" resultType="codedriver.framework.restful.dto.ApiVo" useCache="false">
		SELECT
		`token`,
		`count` AS visitTimes
		FROM
		`api_access_count`
		WHERE token in
		<foreach collection="list" item="token" separator="," open="(" close=")">
			#{token}
		</foreach>
	</select>

	<select id="checkApiAccessCountIsExists" parameterType="java.lang.String" resultType="int" useCache="false">
		SELECT COUNT(`token`) FROM `api_access_count` WHERE token = #{token}
	</select>

	<update id="updateApihandlerById" parameterType="codedriver.framework.restful.dto.ApiVo">
		UPDATE `api`
		SET
		handler = #{handler}
		WHERE
		id = #{id}
	</update>

	<update id="batchUpdate" parameterType="codedriver.framework.restful.dto.ApiVo">
		UPDATE `api`
		SET
		<if test="isActive != null">
			`is_active` = #{isActive},
		</if>
		<if test="expire != null">
			`expire` = #{expire},
		</if>
		<if test="timeout != null">
			`timeout` = #{timeout},
		</if>
		`token` = `token`
		WHERE `token` IN
		<foreach collection="tokenList" item="token" separator="," open="(" close=")">
			#{token}
		</foreach>

	</update>
	
	<update id="increaseApiAccessCount">
	UPDATE `api_access_count` SET `count` = `count` + #{count} WHERE `token` = #{token}
	</update>

	<insert id="replaceApi" parameterType="codedriver.framework.restful.dto.ApiVo">
		REPLACE INTO `api`
		(
		`name`,
		`module_id`,
		`is_active`,
		`handler`,
		`config`,
		`token`,
		`description`,
		`expire`,
		`username`,
		`password`,
		`authtype`,
		`type`,
		`qps`,
		`timeout`,
		`need_audit`,
		`create_time`
		) VALUES (
		#{name},
		#{moduleId},
		#{isActive},
		#{handler},
		#{config},
		#{token},
		#{description},
		#{expire},
		#{username},
		#{password},
		#{authtype},
		#{type},
		#{qps},
		#{timeout},
		#{needAudit},
		now()
		)
	</insert>

	<insert id="insertApiAudit" parameterType="codedriver.framework.restful.dto.ApiAuditVo">
		INSERT INTO `api_audit` (
		`id`,
		`token`,
		`user_uuid`,
		`authtype`,
		`server_id`,
		`ip`,
		`start_time`,
		`end_time`,
		`time_cost`,
		`status`,
		`param_hash`,
		`result_hash`,
		`error_hash`
		)
		VALUES
		(#{id},
		#{token},
		#{userUuid},
		#{authtype},
		#{serverId},
		#{ip},
		#{startTime},
		#{endTime},
		#{timeCost},
		#{status},
		#{paramHash},
		#{resultHash},
		#{errorHash}
		)
	</insert>

	<insert id="replaceApiAuditDetail">
		REPLACE INTO `api_audit_detail` (`hash`, `content`)
		VALUES
		(#{hash}, #{content})
	</insert>

	<insert id="replaceApiAccessCount">
		REPLACE INTO `api_access_count` (`token`, `count`) VALUES (#{token}, #{count})
	</insert>

	<delete id="deleteApiByToken" parameterType="java.lang.String">
		DELETE FROM `api` WHERE `token` = #{token}
	</delete>
</mapper>
