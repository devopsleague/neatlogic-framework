<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.dashboard.dao.mapper.DashboardMapper">

	<select id="getDefaultDashboardUuidByUserId" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT
		`dashboard_uuid`
		FROM
		`dashboard_default`
		WHERE (user_id = #{value} and type = 'user') or type = 'system'
		order by type desc
		limit 1
	</select>

	<select id="getDashboardVisitCounter" resultType="codedriver.framework.dashboard.dto.DashboardVisitCounterVo">
		SELECT
		`dashboard_uuid` AS dashboardUuid,
		`user_id` AS userId,
		`visit_count` AS visitCount
		FROM
		`dashboard_visitcounter`
		WHERE
		`dashboard_uuid` = #{dashboardUuid} AND
		`user_id` = #{userId}
	</select>

	<sql id="searchDashboardCondition">
		SELECT
		a.*
		FROM
		`dashboard` a
		LEFT JOIN `dashboard_authority` da ON a.`uuid` = da.`dashboard_uuid`
		<where>
			 a.fcu = #{fcu}
			<if test="keyword !=null and keyword!=''">
				AND a.name LIKE concat('%', #{keyword}, '%')
			</if>
				and (da.type = 'common' AND da.`uuid` = 'alluser')
			<if test="userId != null and userId != ''">
				OR	(da.type = 'user' AND da.`uuid` = #{userId})
			</if>
			<if test="teamUuidList != null and teamUuidList.size() > 0">
				OR (da.type = 'team' AND da.`uuid` IN 
				<foreach collection="teamUuidList" item="teamUuid" open="(" separator=","  close=")">
					#{teamUuid}
				</foreach>
					)
			</if>
			<if test="roleNameList != null and roleNameList.size() > 0">
				OR (da.type = 'role' AND da.`uuid` IN 
					<foreach collection="roleNameList" item="roleName" open="(" separator=","  close=")">
						#{roleName}
					</foreach>
					)
			</if>
			<if test="userId != null and userId != ''">
			or	a.`fcu` = #{userId}
			</if>
		</where>
	</sql>

	<select id="searchDashboardCount" parameterType="codedriver.framework.dashboard.dto.DashboardVo" resultType="int">
		SELECT
		count(DISTINCT `uuid`)
		FROM (
		<include refid="searchDashboardCondition" />
		) tmp
	</select>
	
	<resultMap id="dashboardMap" type="codedriver.framework.dashboard.dto.DashboardVo">
		<id column="uuid" property="uuid" />
		<result column="name" property="name" />
		<result column="description" property="description" />
		<result column="fcu" property="fcu" />
		<result column="fcuName" property="fcuName" />
		<result column="fcd" property="fcd" />
		<result column="lcu" property="lcu" />
		<result column="lcuName" property="lcuName" />
		<result column="lcd" property="lcd" />
		<result column="defaultUser" property="defaultUser" />
		<result column="defaultType" property="defaultType" />
		<result column="type" property="type" />
		<result column="sort" property="sort" />
		<result column="condition_config" property="conditionConfig" />
		<collection property="authorityList" ofType="codedriver.framework.dto.AuthorityVo">
			<result column="authUuid" property="uuid" />
			<result column="authType" property="type" />
		</collection>
	</resultMap>
	
	<select id="searchAuthorizedDashboardUuid" parameterType="codedriver.framework.dashboard.dto.DashboardVo" resultType="java.lang.String">
		SELECT
		DISTINCT
		a.uuid
		FROM
		`dashboard` a
		LEFT JOIN `dashboard_authority` da ON a.`uuid` = da.`dashboard_uuid`
		<where>
			 a.fcu = #{fcu}
			<if test="keyword !=null and keyword!=''">
				AND a.name LIKE concat('%', #{keyword}, '%')
			</if>
				and (da.type = 'common' AND da.`uuid` = 'alluser')
			<if test="userId != null and userId != ''">
			  	OR	(da.type = 'user' AND da.`uuid` = #{userId})
			</if>
			<if test="teamUuidList != null and teamUuidList.size() > 0">
				OR (da.type = 'team' AND da.`uuid` IN 
				<foreach collection="teamUuidList" item="teamUuid" open="(" separator=","  close=")">
					#{teamUuid}
				</foreach>
					)
			</if>
			<if test="roleNameList != null and roleNameList.size() > 0">
				OR (da.type = 'role' AND da.`uuid` IN 
					<foreach collection="roleNameList" item="roleName" open="(" separator=","  close=")">
						#{roleName}
					</foreach>
					)
			</if>
			<if test="userId != null and userId != ''">
			or	a.`fcu` = #{userId}
			</if>
		</where>
		ORDER BY a.fcd DESC
		<if test="needPage">
			LIMIT #{startNum}, #{pageSize}
		</if>
	</select>

	<select id="getDashboardListByUuidList" parameterType="java.util.List" resultMap="dashboardMap">
		SELECT
		a.`uuid`,
		a.`name`,
		a.description,
		a.is_active AS isActive,
		a.fcu,
		(SELECT user_name FROM `user` x WHERE x.user_id = a.`fcu`) AS fcuName,
		a.fcd,
		a.lcu,
		(SELECT user_name FROM `user` x WHERE x.user_id = a.`lcu`) AS lcuName,
		a.lcd,
		a.type,
		da.`type` as authType,
		da.`uuid` as authUuid,
		do.user_id as `defaultUser`,
		do.type as `defaultType`
		FROM
		`dashboard` a
		LEFT JOIN `dashboard_authority` da ON a.`uuid` = da.`dashboard_uuid`
		LEFT JOIN `dashboard_default` do ON a.`uuid` = do.`dashboard_uuid`
		<where>
			<if test="uuidList != null and uuidList.size() > 0">
				 a.`uuid` IN 
				<foreach collection="uuidList" item="uuid" open="(" separator=","  close=")">
					#{uuid}
				</foreach>
			</if>
		</where>
		ORDER BY fcd DESC
	</select>

	<select id="searchTopVisitDashboard" parameterType="codedriver.framework.dashboard.dto.DashboardVo" resultType="codedriver.framework.dashboard.dto.DashboardVo">
		SELECT
		DISTINCT
		`uuid`,
		`name`,
		description,
		is_active AS isActive,
		fcu,
		fcd,
		lcu,
		lcd,
		b.visit_count
		FROM (
		<include refid="searchDashboardCondition" />
		) tmp LEFT JOIN dashboard_visitcounter b ON tmp.uuid = b.dashboard_uuid AND b.user_id = #{fcu}
		ORDER BY b.visit_count DESC, fcd DESC
		LIMIT #{pageSize}
	</select>

	<select id="checkDashboardNameIsExists" parameterType="codedriver.framework.dashboard.dto.DashboardVo" resultType="int">
		SELECT
		count(1)
		FROM
		`dashboard`
		WHERE uuid != #{uuid}
		AND
		name = #{name}
	</select>

	<select id="getDashboardWidgetByUuid" parameterType="java.lang.String" resultType="codedriver.framework.dashboard.dto.DashboardWidgetVo">
		SELECT
		`uuid`,
		`name`,
		`refresh_interval` AS refreshInterval,
		`description`,
		`dashboard_uuid` AS dashboardUuid,
		`handler`,
		`chart_type` AS chartType,
		`condition_config` AS conditionConfig,
		`chart_config` AS chartConfig,
		`x`,
		`y`,
		`i`,
		`h`,
		`w`,
		`detail_widget_uuid` AS detailWidgetUuid
		FROM
		`dashboard_widget`
		WHERE
		uuid = #{value}
	</select>

	<select id="getDashboardAuthorityListByDashboardUuid" parameterType="java.lang.String" resultType="codedriver.framework.dto.AuthorityVo">
		
	</select>

	<select id="getDashboardByUuid" parameterType="java.lang.String" resultType="codedriver.framework.dashboard.dto.DashboardVo">
		SELECT
		d.`uuid`,
		d.`name`,
		d.`description`,
		d.`is_active` AS isActive,
		d.`type`,
		d.`fcd`,
		d.`fcu`,
		d.`lcd`,
		d.`lcu`,
		du.user_id as `defaultUser`,
		du.type as `defaultType`
		FROM
		`dashboard` d
		LEFT JOIN dashboard_default du on d.uuid = du.dashboard_uuid
		WHERE
		`uuid` = #{value}
	</select>
	
	<select id="getAuthorizedDashboardByUuid" parameterType="java.lang.String" resultType="codedriver.framework.dashboard.dto.DashboardVo">
		SELECT
		d.`uuid`,
		d.`name`,
		d.`description`,
		d.`is_active` AS isActive,
		d.`type`,
		d.`fcd`,
		d.`fcu`,
		d.`lcd`,
		d.`lcu`,
		du.user_id as `defaultUser`
		FROM
		`dashboard` d
		LEFT JOIN dashboard_default du on d.uuid = du.dashboard_uuid
		<where>
			`uuid` = #{value}
			and
			((a.type = 'common' AND da.`uuid` = 'alluser')
			<if test="userId != null and userId != ''">
			  	OR	(da.type = 'user' AND da.`uuid` = #{userId})
			</if>
			<if test="teamUuidList != null and teamUuidList.size() > 0">
				OR (da.type = 'team' AND da.`uuid` IN 
				<foreach collection="teamUuidList" item="teamUuid" open="(" separator=","  close=")">
					#{teamUuid}
				</foreach>
					)
			</if>
			<if test="roleNameList != null and roleNameList.size() > 0">
				OR (da.type = 'role' AND da.`uuid` IN 
					<foreach collection="roleNameList" item="roleName" open="(" separator=","  close=")">
						#{roleName}
					</foreach>
					)
			</if>
			<if test="userId != null and userId != ''">
			or	do.`user_id` = #{userId}
			</if>
			)
		</where>
		
	</select>

	<select id="getDashboardWidgetByDashboardUuid" parameterType="java.lang.String" resultType="codedriver.framework.dashboard.dto.DashboardWidgetVo">
		SELECT
		`uuid`,
		`name`,
		`refresh_interval` AS refreshInterval,
		`description`,
		`dashboard_uuid` AS dashboardUuid,
		`handler`,
		`chart_type` AS chartType,
		`x`,
		`y`,
		`i`,
		`h`,
		`w`,
		`detail_widget_uuid` AS detailWidgetUuid
		FROM
		`dashboard_widget`
		WHERE
		dashboard_uuid = #{value}
	</select>


	<update id="updateDashboard" parameterType="codedriver.framework.dashboard.dto.DashboardVo">
		UPDATE
		`dashboard`
		SET
		`name` = #{name},
		`description` = #{description},
		`is_active` = #{isActive},
		`lcd` = NOW(),
		`lcu` = #{lcu}
		WHERE `uuid` = #{uuid}
	</update>

	<update id="updateDashboardVisitCounter" parameterType="codedriver.framework.dashboard.dto.DashboardVisitCounterVo">
		UPDATE
		`dashboard_visitcounter`
		SET
		`visit_count` = `visit_count` + 1
		WHERE `dashboard_uuid` = #{dashboardUuid}
		AND `user_id` = #{userId}
	</update>

	<insert id="insertDashboardAuthority">
		INSERT INTO `dashboard_authority` (
		  `dashboard_uuid`,
		  `type`,
		  `uuid`
		) 
		VALUES
		  (
		    #{dashboardUuid},
		    #{authorityVo.type},
		    #{authorityVo.uuid}
		  ) ;
	</insert>

	<insert id="insertDashboardVisitCounter" parameterType="codedriver.framework.dashboard.dto.DashboardVisitCounterVo">
		INSERT INTO `dashboard_visitcounter` (
		`dashboard_uuid`,
		`user_id`,
		`visit_count`
		)
		VALUES
		(
		#{dashboardUuid},
		#{userId},
		#{visitCount}
		)
	</insert>

	<insert id="insertDashboard" parameterType="codedriver.framework.dashboard.dto.DashboardVo">
		INSERT INTO `dashboard` (
		`uuid`,
		`name`,
		`type`,
		`description`,
		`is_active`,
		`fcd`,
		`fcu`
		)
		VALUES
		(
		#{uuid},
		#{name},
		#{type},
		#{description},
		#{isActive},
		NOW(),
		#{fcu}
		)
	</insert>

	<insert id="insertDashboardWidget" parameterType="codedriver.framework.dashboard.dto.DashboardWidgetVo">
		INSERT INTO `dashboard_widget` (
		`uuid`,
		`name`,
		`refresh_interval`,
		`description`,
		`dashboard_uuid`,
		`handler`,
		`chart_type`,
		`condition_config`,
		`chart_config`,
		`detail_widget_uuid`,
		`x`,
		`y`,
		`h`,
		`w`,
		`i`
		)
		VALUES
		(
		#{uuid},
		#{name},
		#{refreshInterval},
		#{description},
		#{dashboardUuid},
		#{handler},
		#{chartType},
		#{conditionConfig},
		#{chartConfig},
		#{detailWidgetUuid},
		#{x},
		#{y},
		#{h},
		#{w},
		#{i}
		)
	</insert>

	<insert id="insertDashboardDefault">
		INSERT INTO `dashboard_default` (`dashboard_uuid`, `user_id`,`type`)
		VALUES
		(#{dashboardUuid}, #{userId},#{type})
	</insert>

	<delete id="deleteDashboardWidgetByDashboardUuid" parameterType="java.lang.String">
		DELETE
		FROM
		`dashboard_widget`
		WHERE `dashboard_uuid` = #{value}
	</delete>

	<delete id="deleteDashboardDefaultByDashboardUuid" parameterType="java.lang.String">
		DELETE
		FROM
		`dashboard_default`
		WHERE `dashboard_uuid` = #{value}
	</delete>

	<delete id="deleteDashboardDefaultByUserId" parameterType="java.lang.String">
		DELETE
		FROM
		`dashboard_default`
		WHERE
		`user_id` = #{userId}
	</delete>

	<delete id="deleteDashboardAuthorityByUuid" parameterType="java.lang.String">
		DELETE 
		FROM
		  `dashboard_authority`
		WHERE `dashboard_uuid` = #{dashboardUuid} ;
	</delete>

	<delete id="deleteDashboardByUuid" parameterType="java.lang.String">
		DELETE
		FROM
		`dashboard`
		WHERE `uuid` = #{value}
	</delete>

	<delete id="deleteDashboardVisitCounterByDashboardUuid" parameterType="java.lang.String">
		DELETE
		FROM
		`dashboard_visitcounter`
		WHERE `dashboard_uuid` = #{dashboardUuid}
	</delete>
</mapper>