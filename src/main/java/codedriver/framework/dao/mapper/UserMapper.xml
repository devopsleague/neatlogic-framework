<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.dao.mapper.UserMapper">
	<select id="checkUserIsInTeam" resultType="int">
		SELECT
		count(1)
		FROM
		`user_team`
		WHERE user_id = #{userId}
		AND team_uuid = #{teamUuid}
	</select>

	<select id="getUserBaseInfoByUserId" parameterType="java.lang.String" resultType="codedriver.framework.dto.UserVo">
		SELECT
		a.`user_id` as userId,
		a.`user_name` as userName,
		a.`email`,
		a.`phone`,
		b.`password`,
		a.`pinyin`,
		a.`is_active` as isActive,
		a.`user_info` as userInfo
		FROM
		`user` a
		LEFT JOIN `user_password` b ON a.`user_id` = b.`user_id` AND b.`is_active` = 1
		WHERE a.user_id = #{value}
	</select>

	<resultMap id="userInfoMap" type="codedriver.framework.dto.UserVo">
		<id property="userId" column="userId" />
		<result property="userName" column="userName" />
		<result property="email" column="email" />
		<result property="phone" column="phone" />
		<result property="pinyin" column="pinyin" />
		<result property="isActive" column="isActive" />
		<collection property="roleNameList" ofType="java.lang.String">
			<id property="roleName" column="roleName" />
		</collection>
		<collection property="teamList" ofType="codedriver.framework.dto.TeamVo">
			<id property="uuid" column="teamUuid" />
			<result property="name" column="teamName" />
		</collection>
	</resultMap>

	<select id="getUserByUserId" parameterType="java.lang.String" resultMap="userInfoMap">
		SELECT
		a.`user_id` as userId,
		a.`user_name` as userName,
		a.`email`,
		a.`phone`,
		e.`password`,
		a.`pinyin`,
		a.`is_active` as isActive,
		b.role_name as roleName,
		c.team_uuid as teamUuid,
		d.name as teamName
		FROM
		`user` a
		LEFT JOIN user_role b ON a.user_id = b.user_id
		LEFT JOIN user_team c ON a.user_id = c.user_id
		LEFT JOIN team d ON c.team_uuid = d.uuid
		LEFT JOIN `user_password` e ON a.`user_id` = e.`user_id` AND e.`is_active` = 1
		WHERE
		a.user_id = #{value} 
	</select>

	<select id="getLeaderUserIdByTeamIds" resultType="java.lang.String">
		SELECT
		`user_id` AS userId
		FROM
		`user_team_role`
		WHERE
		role = 'leader'
		AND
		team_uuid IN
		<foreach collection="teamUuidIdList" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>

    <select id="searchUser" parameterType="codedriver.framework.dto.UserVo" resultMap="userInfoMap">
        SELECT
        k.`user_id` as `userId`,
        k.`user_name` as `userName`,
        k.`email`,
        k.`phone`,
        k.`pinyin`,
        k.`is_active` as `isActive`,
        h.`role_name` as `roleName`,
        j.`uuid` as `teamUuid`,
        j.`name` as `teamName`
        FROM (
        SELECT
        DISTINCT (a.`user_id`),
		a.`id`
        FROM
       `user` a
        LEFT JOIN user_role b ON a.user_id = b.user_id
        LEFT JOIN user_team c ON a.user_id = c.user_id
        LEFT JOIN team d ON c.team_uuid = d.uuid
        LEFT JOIN `user_authority` f ON a.`user_id` = f.`user_id`
		LEFT JOIN `role_authority` l ON b.`role_name` = l.`role_name`
        WHERE
        1=1
        <if test="keyword !=null and keyword != ''">
            AND
            (a.user_id LIKE CONCAT('%', #{keyword}, '%')
            OR a.user_name LIKE CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="teamUuid != null and teamUuid != ''">
            AND c.`team_uuid` = #{teamUuid}
        </if>
        <if test="authGroup != null and authGroup != ''">
            AND f.`auth_group` = #{authGroup}
        </if>
        <if test="auth != null and auth != ''">
            AND f.`auth` = #{auth} OR l.`auth` = #{auth}
        </if>
        <if test="roleName != null and roleName != ''">
            AND b.`role_name` = #{roleName}
        </if>
		<if test="needPage == true">
			LIMIT #{startNum}, #{pageSize}
		</if>
        ) g
        LEFT JOIN `user` k ON g.`user_id` = k.`user_id`
        LEFT JOIN `user_role` h ON g.user_id = h.`user_id`
        LEFT JOIN `user_team` i ON g.`user_id` = i.`user_id`
        LEFT JOIN `team` j ON i.`team_uuid` = j.`uuid`
        ORDER BY g.`id` DESC
    </select>

	<select id="searchUserByAuth" resultType="codedriver.framework.dto.UserVo" parameterType="string">
		SELECT
		a.`user_id` as `userId`,
		a.`user_name` as `userName`,
		a.`email`,
		a.`phone`,
		a.`pinyin`,
		a.`is_active` as `isActive`,
		a.`user_info` as `userInfo`
		FROM `user` a
		LEFT JOIN `user_authority` b ON a.`user_id` = b.`user_id`
		WHERE b.`auth` = #{auth}
		ORDER BY a.`id`	 DESC
	</select>

	<select id="searchRoleUserByAuth" parameterType="string" resultMap="userRoleMap">
		SELECT
		a.`user_id` as `userId`,
		a.`user_name` as `userName`,
		a.`email`,
		a.`phone`,
		a.`pinyin`,
		a.`is_active` as `isActive`,
		a.`user_info` as `userInfo`,
		b.`role_name` as `roleName`
		FROM `user` a
		LEFT JOIN `user_role` b ON a.`user_id` = b.`user_id`
		LEFT JOIN `role_authority` c ON b.`role_name` = c.`role_name`
		WHERE c.`auth` = #{auth}
		ORDER BY a.`id` DESC
	</select>

	<select id="searchUserAuthByUserId" parameterType="String" resultType="codedriver.framework.dto.UserAuthVo">
		SELECT `user_id` as `userId`,
		`auth_group` as `authGroup`,
		`auth`
		FROM `user_authority`
		WHERE `user_id` = #{userId}
	</select>
	
	<select id="searchUserAllAuthByUserAuth" parameterType="codedriver.framework.dto.UserAuthVo" resultType="codedriver.framework.dto.UserAuthVo">
		SELECT auth_group authGroup,auth FROM `user_role` ur 
		JOIN `role_authority` ra ON ur.`role_name` = ra.`role_name` WHERE ur.`user_id` = #{userId} 
		<if test="auth != null and auth != ''">
			AND `auth` = #{auth}
		</if>
		UNION
		SELECT auth_group authGroup,auth FROM `user_authority` WHERE user_id = #{userId}
		<if test="auth != null and auth != ''">
			AND `auth` = #{auth}
		</if>
	</select>

	<select id="searchUserRoleAuthByUserId" parameterType="String" resultType="codedriver.framework.dto.RoleAuthVo">
		SELECT
		a.`role_name` as `roleName`,
		a.`auth_group` as `authGroup`,
		a.`auth`
		FROM `role_authority` a
		LEFT JOIN `user_role` b ON a.`role_name` = b.`role_name`
		WHERE b.`user_id` = #{userId}
	</select>

	<select id="searchUserCount" parameterType="codedriver.framework.dto.UserVo" resultType="int">
		SELECT
		count(DISTINCT (a.`user_id`))
		FROM
		`user` a
		LEFT JOIN `user_team` b ON a.`user_id` = b.`user_id`
		LEFT JOIN `user_authority` c ON a.`user_id` = c.`user_id`
		LEFT JOIN `user_role` d ON a.`user_id` = d.`user_id`
		WHERE
		1=1
		<if test="keyword !=null and keyword != ''">
			AND
			(a.`user_id` LIKE CONCAT('%', #{keyword}, '%')
			OR a.`user_name` LIKE CONCAT('%', #{keyword}, '%'))
		</if>

		<if test="teamUuid != null and teamUuid != ''">
			AND b.`team_uuid` = #{teamUuid}
		</if>

		<if test="authGroup != null and authGroup != ''">
			AND c.`auth_group` = #{authGroup}
		</if>

		<if test="auth != null and auth != ''">
			AND c.`auth` = #{auth}
		</if>

		<if test="roleName != null and roleName != ''">
			AND d.`role_name` = #{roleName}
		</if>
	</select>

	<select id="getLimitUserPasswordIdList" resultType="long" parameterType="string">
		SELECT id FROM `user_password` WHERE user_id = #{userId} ORDER BY id DESC LIMIT 2
	</select>

	<select id="getActiveUserByTeamId" parameterType="java.lang.String" resultType="codedriver.framework.dto.UserVo">
		SELECT
		a.`user_id` as `userId`,
		a.`user_name` as `userName`,
		a.`email`,
		a.`phone`,
		d.`password`,
		a.`is_active` as `isActive`
		FROM `user` a
		LEFT JOIN `user_team` b ON a.`user_id` = b.`user_id`
		LEFT JOIN `team` c ON b.`team_uuid` = c.`uuid`
		LEFT JOIN `user_password` d ON a.`user_id` = d.`user_id` AND d.`is_active` = 1
		WHERE c.`uuid` = #{teamId} AND a.`is_active` = 1
	</select>

	<resultMap id="userRoleMap" type="codedriver.framework.dto.UserVo">
		<id property="userId" column="userId" />
		<result property="userName" column="userName" />
		<result property="email" column="email" />
		<result property="phone" column="phone"/>
		<result property="pinyin" column="pinyin"/>
		<result property="password" column="password" />
		<result property="isActive" column="isActive" />
		<result property="userInfo" column="userInfo"/>
		<collection property="roleNameList" ofType="java.lang.String">
			<result column="roleName" />
		</collection>
	</resultMap>

	<select id="getUserByUserIdAndPassword" parameterType="codedriver.framework.dto.UserVo" resultMap="userRoleMap">
		SELECT
		a.`user_id` AS userId,
		a.`user_name` AS userName,
		a.`email`,
		a.`phone`,
		a.`pinyin`,
		a.`user_info` as `userInfo`,
		c.`password`,
		a.`is_active` AS isActive,
		b.`role_name` AS roleName
		FROM
		`user` a
		LEFT JOIN user_role b ON a.`user_id` = b.`user_id`
		LEFT JOIN `user_password` c ON a.`user_id` = c.`user_id` AND c.`is_active` = 1
		WHERE a.user_id = #{userId} AND c.password = #{password}  AND a.`is_active` = 1
	</select>

	<select id="getUserSessionByUserId" parameterType="java.lang.String" resultType="codedriver.framework.dto.UserSessionVo">
		SELECT `user_id` as userId,`visit_time` as sessionTime FROM `user_session`
		WHERE `user_id` = #{value}
	</select>

	<select id="getUserByUserIdList" parameterType="java.lang.String" resultType="codedriver.framework.dto.UserVo">
		SELECT
		`user_id` AS userId,
		`user_name` AS userName,
		`email`,
		`phone`,
		`is_active` AS isActive
		FROM
		`user`
		Where `user_id` in
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item}
		</foreach>
		ORDER BY `id` DESC
	</select>

	<select id="getUserCountByAuth" resultType="codedriver.framework.dto.AuthVo">
		SELECT f.`auth` as `name`,
		COUNT(DISTINCT (f.`userId`)) as `userCount`
		FROM (
			SELECT
			b.`user_id` as `userId`,
			a.`auth`
			FROM `user_authority` a
			LEFT JOIN `user` b ON a.`user_id` = b.`user_id`
			UNION
			SELECT
			e.`user_id` as `userId`,
			c.`auth`
			FROM `role_authority` c
			LEFT JOIN `user_role` d ON c.`role_name` = d.`role_name`
			LEFT JOIN `user` e ON d.`user_id` = e.`user_id`
		) f
		GROUP BY f.`auth`
	</select>

    <insert id="insertUserAuth" parameterType="codedriver.framework.dto.UserAuthVo">
        INSERT INTO `user_authority`(
        `user_id`,
        `auth_group`,
        `auth`
        ) VALUES
        (
         #{userId},
         #{authGroup},
         #{auth}
        )
    </insert>

	<insert id="insertUser" parameterType="codedriver.framework.dto.UserVo">
		INSERT INTO `user` (
		`user_id`,
		`user_name`,
		`email`,
		`phone`,
		`pinyin`,
		`is_active`,
		`user_info`
		)
		VALUES
		(
		#{userId},
		#{userName},
		#{email},
		#{phone},
		#{pinyin},
		#{isActive},
		#{userInfo}
		)
	</insert>

	<insert id="insertUserPassword" parameterType="codedriver.framework.dto.UserVo">
		INSERT INTO `user_password` (
			`user_id`,
			`password`,
			`create_time`,
			`is_active`
		) VALUES
		(
		#{userId},
		#{password},
		NOW(),
		1
		)
	</insert>

	<insert id="insertUserTeam">
		INSERT INTO `user_team` (`team_uuid`, `user_id`)
		VALUES
		(#{teamUuid}, #{userId})
	</insert>

	<insert id="insertUserRole">
		INSERT INTO `user_role` (`user_id`, `role_name`)
		VALUES
		(#{userId}, #{roleName})
	</insert>

	<insert id="insertUserSession" parameterType="java.lang.String">
		INSERT INTO `user_session` (`user_id`, `visit_time`)
		VALUES
		(#{userId}, now()) ;
	</insert>

	<update id="updateUser" parameterType="codedriver.framework.dto.UserVo">
		UPDATE
		`user`
		SET
		`user_name` = #{userName, typeHandler=XssHandler},
		`email` = #{email},
		`phone` = #{phone},
		`pinyin` = #{pinyin},
		`is_active` = #{isActive},
		`user_info` = #{userInfo, typeHandler=XssHandler}
		WHERE `user_id` = #{userId}
	</update>

	<update id="updateUserPasswordActive" parameterType="java.lang.String">
		UPDATE
		`user_password`
		SET
		`is_active` = 0
		WHERE `user_id` = #{userId}
	</update>

	<update id="updateUserActive" parameterType="codedriver.framework.dto.UserVo">
		UPDATE
		`user`
		SET
		`is_active` = #{isActive}
		WHERE `user_id` = #{userId}
	</update>

	<update id="updateUserSession" parameterType="java.lang.String">
		UPDATE `user_session` set `visit_time` = now() WHERE `user_id` = #{userId}
	</update>

	<delete id="deleteUserPasswordByLimit">
		DELETE FROM `user_password`
		WHERE `user_id` = #{userId}
		AND `id` NOT IN
		<foreach collection="idList" item="id" open="(" close=")" separator=",">
			#{id}
		</foreach>
	</delete>

	<delete id="deleteUserByUserId" parameterType="java.lang.String">
		DELETE
		FROM
		`user`
		WHERE `user_id` = #{value}
	</delete>

    <delete id="deleteUserAuthByUserId" parameterType="java.lang.String">
        DELETE
        FROM
        `user_authority` WHERE `user_id` = #{userId}
    </delete>

	<delete id="deleteUserAuth" parameterType="codedriver.framework.dto.UserVo">
		DELETE
		FROM
		`user_authority`
		WHERE `user_id` = #{userId}
		<if test="userAuthList != null and userAuthList.size > 0">
			AND `auth` IN
			<foreach collection="userAuthList" open="(" separator="," close=")" item="userAuth">
				#{userAuth.auth}
			</foreach>
		</if>
	</delete>

	<delete id="deleteUserSessionByUserId" parameterType="java.lang.String">
		DELETE FROM `user_session` where `user_id` = #{value}
	</delete>

	<delete id="deleteUserRoleByUserId" parameterType="java.lang.String">
		DELETE FROM `user_role` where `user_id` = #{value}
	</delete>

	<delete id="deleteUserTeamByUserId" parameterType="java.lang.String">
		DELETE
		FROM
		`user_team`
		WHERE `user_id` = #{value}
	</delete>

	<delete id="deleteUserAuthByAuth" parameterType="string">
		DELETE FROM `user_authority` WHERE `auth` = #{auth}
	</delete>

</mapper>

