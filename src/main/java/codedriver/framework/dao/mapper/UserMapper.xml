<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.dao.mapper.UserMapper">
	<select id="checkUserIsInTeam" resultType="int">
		SELECT
		count(1)
		FROM
		`user_team`
		WHERE user_id = #{userId}
		AND team_uuid = #{teamUuid}
	</select>

	<resultMap id="userInfoMap" type="codedriver.framework.dto.UserVo">
		<id property="userId" column="userId" />
		<result property="userName" column="userName" />
		<result property="email" column="email" />
		<result property="phone" column="phone" />
		<result property="password" column="password" />
		<result property="pinyin" column="pinyin" />
		<result property="isActive" column="isActive" />
		<collection property="roleNameList" ofType="java.lang.String">
			<result property="roleName" column="roleName" />
		</collection>
		<collection property="teamList" ofType="codedriver.framework.dto.TeamVo">
			<result property="uuid" column="teamUuid" />
			<result property="name" column="teamName" />
		</collection>
	</resultMap>

	<select id="getUserByUserId" parameterType="java.lang.String" resultMap="userInfoMap">
		SELECT
		a.`user_id` as userId,
		a.`user_name` as userName,
		a.`email`,
		a.`phone`,
		a.`password`,
		a.`pinyin`,
		a.`is_active` as isActive,
		b.role_name as roleName,
		c.team_uuid as teamUuid,
		d.name as teamName
		FROM
		`user` a
		LEFT JOIN user_role b ON a.user_id = b.user_id
		LEFT JOIN user_team c ON a.user_id = c.user_id
		LEFT JOIN team d ON c.team_uuid = d.uuid
		WHERE
		a.user_id = #{value}
	</select>

	<select id="getLeaderUserIdByTeamIds" resultType="java.lang.String">
		SELECT
		`user_id` AS userId
		FROM
		`user_team_role`
		WHERE
		role = 'leader'
		AND
		team_uuid IN
		<foreach collection="teamUuidIdList" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>

	<select id="searchUser" parameterType="codedriver.framework.dto.UserVo" resultType="codedriver.framework.dto.UserVo">
		SELECT
		`user_id` AS userId,
		`user_name` AS userName,
		`email`,
		`phone`,
		`is_active` AS isActive
		FROM
		`user`
		WHERE
		1=1
		<if test="keyword !=null and keyword != ''">
			AND
			(user_id LIKE CONCAT(#{keyword}, '%')
			OR user_name LIKE CONCAT(#{keyword}, '%'))
		</if>
		ORDER BY user_id
		<if test="needPage == true">
			LIMIT #{startNum}, #{pageSize}
		</if>
	</select>
	
	<select id="searchUserCount" parameterType="codedriver.framework.dto.UserVo" resultType="int">
		SELECT
		count(1)
		FROM
		`user`
		WHERE
		1=1
		<if test="keyword !=null and keyword != ''">
			AND
			(user_id LIKE CONCAT(#{keyword}, '%')
			OR user_name LIKE CONCAT(#{keyword}, '%'))
		</if>
	</select>

	<select id="getActiveUserByTeamId" parameterType="java.lang.String" resultType="codedriver.framework.dto.UserVo">
		SELECT
		a.`user_id` as `userId`,
		a.`user_name` as `userName`,
		a.`email`,
		a.`phone`,
		a.`password`,
		a.`is_active` as `isActive`
		FROM `user` a
		LEFT JOIN `user_team` b ON a.`user_id` = b.`user_id`
		LEFT JOIN `team` c ON b.`team_uuid` = c.`uuid`
		WHERE c.`uuid` = #{teamId} AND a.`is_active` = 1
	</select>

	<resultMap id="userRoleMap" type="codedriver.framework.dto.UserVo">
		<id property="userId" column="userId" />
		<result property="userName" column="userName" />
		<result property="email" column="email" />
		<result property="password" column="password" />
		<result property="isActive" column="isActive" />
		<collection property="roleNameList" ofType="java.lang.String">
			<result column="roleName" />
		</collection>
	</resultMap>

	<select id="getUserByUserIdAndPassword" parameterType="codedriver.framework.dto.UserVo" resultMap="userRoleMap">
		SELECT
		a.`user_id` AS userId,
		a.`user_name` AS userName,
		a.`email`,
		a.`password`,
		a.`is_active` AS isActive,
		b.`role_name` AS roleName
		FROM
		`user` a LEFT JOIN user_role b ON a.`user_id` = b.`user_id`
		WHERE a.user_id = #{userId} AND a.password = #{password}
	</select>

	<select id="getUserSessionByUserId" parameterType="java.lang.String" resultType="codedriver.framework.dto.UserSessionVo">
		SELECT `user_id` as userId,`visit_time` as sessionTime FROM `user_session`
		WHERE `user_id` = #{value}
	</select>
	
	<select id="getUserByUserIdList" parameterType="java.lang.String" resultType="codedriver.framework.dto.UserVo" >
	SELECT
		`user_id` AS userId,
		`user_name` AS userName,
		`email`,
		`phone`,
		`is_active` AS isActive
		FROM
		`user`
	Where `user_id` in 
	<foreach collection="list" item="item" separator="," open="(" close=")">
	#{item}
	</foreach>
	</select>

	<insert id="insertUser" parameterType="codedriver.framework.dto.UserVo">
		INSERT INTO `user` (
		`user_id`,
		`user_name`,
		`email`,
		`phone`,
		`password`,
		`pinyin`,
		`is_active`,
		`user_info`
		)
		VALUES
		(
		#{userId},
		#{userName},
		#{email},
		#{phone},
		#{password},
		#{pinyin},
		#{isActive},
		#{userInfo}
		)
	</insert>

	<insert id="insertUserTeam">
		INSERT INTO `user_team` (`team_uuid`, `user_id`)
		VALUES
		(#{teamUuid}, #{userId})
	</insert>

	<insert id="insertUserRole">
		INSERT INTO `user_role` (`user_id`, `role_name`)
		VALUES
		(#{userId}, #{roleName})
	</insert>

	<insert id="insertUserSession" parameterType="java.lang.String">
		INSERT INTO `user_session` (`user_id`, `visit_time`)
		VALUES
		(#{userId}, now()) ;
	</insert>

	<update id="updateUser" parameterType="codedriver.framework.dto.UserVo">
		UPDATE
		`user`
		SET
		`user_name` = #{userName},
		`email` = #{email},
		`phone` = #{phone},
		`password` = #{password},
		`pinyin` = #{pinyin},
		`is_active` = #{isActive},
		`user_info` = #{userInfo}
		WHERE `user_id` = #{userId}
	</update>

	<update id="updateUserSession" parameterType="java.lang.String">
		UPDATE `user_session` set `visit_time` = now() WHERE `user_id` = #{userId}
	</update>
	
	<update id="updateUserPassword" parameterType="codedriver.framework.dto.UserVo">
		UPDATE user SET password = #{password} WHERE user_id = #{userId}
	</update>

	<delete id="deleteUserByUserId" parameterType="java.lang.String">
		DELETE
		FROM
		`user`
		WHERE `user_id` = #{value}
	</delete>

	<delete id="deleteUserSessionByUserId" parameterType="java.lang.String">
		DELETE FROM `user_session` where `user_id` = #{value}
	</delete>

	<delete id="deleteUserRoleByUserId" parameterType="java.lang.String">
		DELETE FROM `user_role` where `user_id` = #{value}
	</delete>

	<delete id="deleteUserTeamByUserId" parameterType="java.lang.String">
		DELETE
		FROM
		`user_team`
		WHERE `user_id` = #{value}
	</delete>

</mapper>

