<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.dao.mapper.RoleMapper">
	<resultMap id="roleMap" type="codedriver.framework.dto.RoleVo">
		<id column="name" property="name"/>
		<result column="description" property="description"/>
	</resultMap>

	<select id="searchRole" parameterType="codedriver.framework.dto.RoleVo" resultMap = "roleMap">
		SELECT
		a.`name`,
		a.`description`,
		COUNT(DISTINCT (b.`user_id`)) as userCount
		FROM `role` a
		LEFT JOIN `user_role` b ON a.`name` = b.`role_name`
		LEFT JOIN `role_authority` c ON a.`name` = c.`role_name`
		WHERE
		1=1
		<if test="keyword != null and keyword != ''">
			AND (name LIKE CONCAT('%',#{keyword}, '%') OR description LIKE CONCAT('%',#{keyword}, '%'))
		</if>
		<if test="authGroup != null and authGroup != ''">
			AND c.`auth_group` = #{authGroup}
		</if>
		<if test="auth != null and auth != ''">
			AND c.`auth` = #{auth}
		</if>
		GROUP BY a.`name`
		ORDER BY a.`id` DESC
		<if test="needPage == true">
			LIMIT #{startNum}, #{pageSize}
		</if>
	</select>

	<select id = "searchRoleAuthByRoleName" parameterType = "String" resultType = "codedriver.framework.dto.RoleAuthVo">
		SELECT
		`role_name` as `roleName`,
		`auth_group` as `authGroup`,
		`auth`
		FROM `role_authority`
		WHERE `role_name` = #{roleName}
	</select>

	<select id="searchRoleCount" parameterType="codedriver.framework.dto.RoleVo" resultType="int">
		SELECT
		COUNT(DISTINCT (a.`name`))
		FROM
		`role` a
		LEFT JOIN `role_authority` b ON a.`name` = b.`role_name`
		WHERE
		1=1
		<if test="keyword != null and keyword != ''">
			AND (name LIKE CONCAT('%', #{keyword}, '%') OR description LIKE CONCAT('%', #{keyword}, '%'))
		</if>
		<if test="authGroup != null and authGroup != ''">
			AND b.`auth_group` = #{authGroup}
		</if>
		<if test="auth != null and auth != ''">
			AND b.`auth` = #{auth}
		</if>
	</select>

	<select id="searchRoleUserCountByRoleName" parameterType="java.lang.String" resultType = "int">
		SELECT
		COUNT(1)
		FROM
		`user_role`
		WHERE `role_name` = #{value}
	</select>

	<select id="getRoleByRoleName" parameterType="java.lang.String" resultType="codedriver.framework.dto.RoleVo">
		SELECT
		`name`,
		`description`
		FROM
		`role`
		WHERE
		`name` = #{value}
	</select>
	
	<select id="getRoleByRoleNameList" parameterType="java.lang.String" resultType="codedriver.framework.dto.RoleVo">
	SELECT
		`name`,
		`description`
		FROM
		`role`
	WHERE `name` in 
	<foreach collection="list" item="item" separator="," open="(" close=")">
	#{item}
	</foreach>
	</select>

	<select id="getRoleCountByAuth"  resultType="codedriver.framework.dto.AuthVo">
		SELECT
		`auth` as `name`,
		COUNT(DISTINCT(`role_name`)) as `roleCount`
		FROM `role_authority`
		GROUP BY `auth`, `auth_group`
	</select>

	<insert id="insertRole" parameterType="codedriver.framework.dto.RoleVo">
		INSERT INTO `role` (`name`, `description`)
		VALUES (#{name, typeHandler=XssHandler}, #{description, typeHandler=XssHandler})
	</insert>

	<insert id="insertRoleUser" parameterType="codedriver.framework.dto.UserVo">
		INSERT INTO `user_role` (`user_uuid`, `role_name`)
		VALUES
		(#{uuid}, #{roleName})
	</insert>

	<insert id="insertRoleAuth" parameterType="codedriver.framework.dto.RoleAuthVo">
		INSERT INTO `role_authority` (
			`role_name`,
			`auth_group`,
			`auth`
		) VALUES (
			#{roleName},
			#{authGroup},
			#{auth}
		)
	</insert>

	<update id="updateRole" parameterType="codedriver.framework.dto.RoleVo">
		UPDATE `role`
		SET `description` = #{description, typeHandler=XssHandler}
		WHERE `name` = #{name}
	</update>

	<delete id="deleteRoleByRoleName" parameterType="java.lang.String">
		DELETE
		FROM
		`role`
		WHERE `name` = #{value}
	</delete>

	<delete id="deleteRoleAuthByRoleName" parameterType="string">
		DELETE
		FROM
		`role_authority`
		WHERE `role_name` = #{roleName}
	</delete>

	<delete id="deleteRoleAuth" parameterType="codedriver.framework.dto.RoleVo">
		DELETE
		FROM
		`role_authority`
		WHERE `role_name` = #{name}
		<if test="roleAuthList != null and roleAuthList.size > 0">
			AND `auth` IN
			<foreach collection="roleAuthList" open="(" separator="," close=")" item="roleAuth">
				#{roleAuth.auth}
			</foreach>
		</if>
	</delete>

	<delete id="deleteMenuRoleByRoleName" parameterType="java.lang.String">
		DELETE
		FROM
		`menu_role`
		WHERE `role_name` = #{value}
	</delete>

	<delete id="deleteUserRoleByRoleName" parameterType="java.lang.String">
		DELETE
		FROM
		`user_role`
		WHERE `role_name` = #{value}
	</delete>

	<delete id="deleteTeamRoleByRoleName" parameterType="java.lang.String">
		DELETE
		FROM
		`team_role`
		WHERE `role_name` = #{value}
	</delete>

	<delete id="deleteRoleAuthByAuth" parameterType="string">
		DELETE FROM `role_authority` WHERE `auth` = #{auth}
	</delete>
</mapper>