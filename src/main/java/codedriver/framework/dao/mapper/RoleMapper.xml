<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright(c) 2021 TechSure Co., Ltd. All Rights Reserved.
  ~ 本内容仅限于深圳市赞悦科技有限公司内部传阅，禁止外泄以及用于其他的商业项目。
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.dao.mapper.RoleMapper">
    <cache type="codedriver.framework.dao.cache.CodeDriverCache" flushInterval="30000" size="100"></cache>

    <select id="getRoleUuidListByAuth" resultType="java.lang.String" useCache="true">
        SELECT
        `role_uuid`
        FROM
        `role_authority`
        WHERE auth IN
        <foreach collection="authList" item="item" open="(" separator="," close=")">#{item}</foreach>
    </select>

    <select id="checkRoleIsExists" parameterType="java.lang.String" resultType="int" useCache="false">
        SELECT COUNT(`uuid`)
        FROM `role`
        WHERE `uuid` = #{uuid}
    </select>

    <resultMap id="roleMap" type="codedriver.framework.dto.RoleVo">
        <id column="uuid" property="uuid"/>
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="description" property="description"/>
    </resultMap>

    <select id="searchRole" parameterType="codedriver.framework.dto.RoleVo" resultMap="roleMap" useCache="false">
        SELECT
        a.`id`,
        a.`uuid`,
        a.`name`,
        a.`description`,
        COUNT(DISTINCT (b.`user_uuid`)) as userCount
        FROM `role` a
        LEFT JOIN `user_role` b ON a.`uuid` = b.`role_uuid`
        LEFT JOIN `role_authority` c ON a.`uuid` = c.`role_uuid`
       <where>
            <if test="keyword != null and keyword != ''">
                AND (name LIKE CONCAT('%',#{keyword}, '%') OR description LIKE CONCAT('%',#{keyword}, '%'))
            </if>
            <if test="authGroup != null and authGroup != ''">
                AND c.`auth_group` = #{authGroup}
            </if>
            <if test="auth != null and auth != ''">
                AND c.`auth` = #{auth}
            </if>
           <if test="roleUuidList != null and roleUuidList.size()>0">
               and uuid in
               <foreach collection="roleUuidList" item="roleUuid" open="(" separator="," close=")">
                   #{roleUuid}
               </foreach>
           </if>
       </where>
        GROUP BY a.`uuid`
        ORDER BY a.`id` DESC
        <if test="needPage == true">
            LIMIT #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="searchRoleForSelect" parameterType="codedriver.framework.dto.RoleVo"
            resultType="codedriver.framework.common.dto.ValueTextVo" useCache="false">
        SELECT
        CONCAT("role#",a.`uuid`) AS `value`,
        a.`name` as `text`
        FROM `role` a
        WHERE
        1=1
        <if test="keyword != null and keyword != ''">
            AND (a.`name` LIKE CONCAT('%',#{keyword}, '%') OR a.`description` LIKE CONCAT('%',#{keyword}, '%'))
        </if>
        <if test="needPage == true">
            LIMIT #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="searchRoleAuthByRoleUuid" parameterType="String" resultType="codedriver.framework.dto.RoleAuthVo"
            useCache="false">
        SELECT `role_uuid`  as `roleUuid`,
               `auth_group` as `authGroup`,
               `auth`
        FROM `role_authority`
        WHERE `role_uuid` = #{roleUuid}
    </select>

    <select id="searchRoleCount" parameterType="codedriver.framework.dto.RoleVo" resultType="int" useCache="false">
        SELECT
        COUNT(DISTINCT (a.`uuid`))
        FROM `role` a
        LEFT JOIN `role_authority` b ON a.`uuid` = b.`role_uuid`
        WHERE
        1=1
        <if test="keyword != null and keyword != ''">
            AND (a.`name` LIKE CONCAT('%', #{keyword}, '%') OR a.`description` LIKE CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="authGroup != null and authGroup != ''">
            AND b.`auth_group` = #{authGroup}
        </if>
        <if test="auth != null and auth != ''">
            AND b.`auth` = #{auth}
        </if>
    </select>

    <select id="searchRoleUserCountByRoleUuid" parameterType="java.lang.String" resultType="int" useCache="false">
        SELECT COUNT(1)
        FROM `user_role`
        WHERE `role_uuid` = #{value}
    </select>

    <select id="getRoleByUuid" parameterType="java.lang.String" resultType="codedriver.framework.dto.RoleVo"
            useCache="false">
        SELECT `id`,
               `uuid`,
               `name`,
               `description`
        FROM `role`
        WHERE `uuid` = #{value}
    </select>

    <select id="getRoleSimpleInfoByUuid" parameterType="java.lang.String" resultType="codedriver.framework.dto.RoleVo"
            useCache="true">
        SELECT `id`,
               `uuid`,
               `name`
        FROM `role`
        WHERE `uuid` = #{value}
    </select>

    <select id="getRoleByUuidList" parameterType="java.lang.String" resultType="codedriver.framework.dto.RoleVo"
            useCache="false">
        SELECT
        `id`,
        `uuid`,
        `name`,
        `description`
        FROM `role`
        WHERE `uuid` in
        <foreach collection="list" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>

    <select id="getRoleCountByAuth" resultType="codedriver.framework.dto.AuthVo" useCache="false">
        SELECT `auth`                        as `name`,
               COUNT(DISTINCT (`role_uuid`)) as `roleCount`
        FROM `role_authority`
        GROUP BY `auth`, `auth_group`
    </select>

    <select id="getRoleUuidByName" parameterType="java.lang.String" resultType="java.lang.String">
        select `uuid`
        from `role`
        where `name` = #{value}
    </select>

    <select id="getRoleUuidAndNameMapList" resultType="codedriver.framework.common.dto.ValueTextVo">
        SELECT
        CONCAT('role#', `uuid`) as `value`,
        `name` as `text`
        FROM `role`
        WHERE `name` in
        <foreach collection="list" item="text" separator="," open="(" close=")">
            #{text}
        </foreach>
    </select>

    <select id="getRoleListByAuthName" parameterType="java.lang.String" resultMap="roleMap" useCache="false">
        select a.`uuid`,
               a.`name`,
               a.`description`
        from `role` a
                 join `role_authority` b
                      on a.`uuid` = b.`role_uuid`
        where b.`auth` = #{value}
        ORDER BY b.`id`
    </select>

    <select id="getRoleUuidListByUserUuidList" parameterType="java.util.List" resultType="java.lang.String">
        select
        distinct `role_uuid`
        from
        `user_role`
        where `user_uuid` in
        <foreach collection="list" item="userUuid" separator="," open="(" close=")">
            #{userUuid}
        </foreach>
    </select>

    <select id="getRoleUuidListByUserUuid" parameterType="java.lang.String" resultType="java.lang.String">
        select `role_uuid`
        from `user_role`
        where `user_uuid` = #{value}
    </select>

    <select id="getRoleTeamListByRoleUuid" resultType="codedriver.framework.dto.RoleTeamVo">
        SELECT
        `team_uuid` AS teamUuid,
        `checked_children` AS checkedChildren
        FROM `team_role`
        WHERE `role_uuid` = #{value}
    </select>

    <select id="getRoleTeamListByRoleUuidAndTeamUuidList" resultType="codedriver.framework.dto.RoleTeamVo">
        SELECT
        `team_uuid` AS teamUuid,
        `checked_children` AS checkedChildren
        FROM `team_role`
        WHERE `role_uuid` = #{roleUuid}
        AND `team_uuid` IN
        <foreach collection="teamUuidList" item="teamUuid" open="(" separator="," close=")">
            #{teamUuid}
        </foreach>
    </select>

    <select id="getRoleTeamListByRoleUuidList" resultType="codedriver.framework.dto.RoleTeamVo" useCache="false">
        SELECT
        `team_uuid` AS teamUuid,
        `checked_children` AS checkedChildren
        FROM `team_role`
        WHERE `role_uuid` IN
        <foreach collection="list" item="roleUuid" open="(" separator="," close=")">
            #{roleUuid}
        </foreach>
    </select>

    <select id="getRoleUserListByRoleUuidList" resultType="codedriver.framework.dto.RoleUserVo" useCache="false">
        SELECT
        `user_uuid` AS userUuid
        FROM `user_role`
        WHERE `role_uuid` IN
        <foreach collection="list" item="roleUuid" open="(" separator="," close=")">
            #{roleUuid}
        </foreach>
    </select>

    <select id="getRoleUuidListByTeamUuidListAndCheckedChildren" resultType="java.lang.String" useCache="false">
        SELECT `role_uuid` FROM `team_role` WHERE `team_uuid` IN
        <foreach collection="teamUuidList" item="teamUuid" open="(" separator="," close=")">
            #{teamUuid}
        </foreach>
        <if test="checkedChildren != null">
            AND `checked_children` = #{checkedChildren}
        </if>
    </select>

    <resultMap id="userRoleTeamMap" type="codedriver.framework.dto.RoleVo">
        <id property="uuid" column="roleUuid"/>
        <result property="name" column="roleName"/>
        <collection property="userRoleTeamList" ofType="codedriver.framework.dto.TeamVo">
            <id property="uuid" column="roleTeamUuid"/>
            <result property="name" column="roleTeamName"/>
            <result property="childrenTeamUuid" column="childrenTeamUuid"/>
            <result property="childrenTeamName" column="childrenTeamName"/>
        </collection>
    </resultMap>

    <select id="getUserTeamRoleListByTeamUuid" resultMap="userRoleTeamMap">
        SELECT t.uuid       as roleTeamUuid,
               t.`name`     as roleTeamName,
               tr.role_uuid as roleUuid,
               r.`name`     as roleName
        FROM team t
                 JOIN team_role tr ON tr.team_uuid = t.uuid
                 LEFT JOIN role r ON r.uuid = tr.role_uuid
        WHERE t.uuid = #{value}
    </select>

    <select id="getUserParentTeamRoleListWithCheckedChildrenByTeam" resultMap="userRoleTeamMap"
            parameterType="codedriver.framework.dto.TeamVo">
        SELECT t.uuid       as roleTeamUuid,
               t.`name`     as roleTeamName,
               tr.role_uuid as roleUuid,
               r.`name`     as roleName,
               #{uuid}      as childrenTeamUuid,
               #{name}      as childrenTeamName
        FROM team t
                 JOIN team_role tr ON tr.team_uuid = t.uuid and tr.checked_children = 1
                 LEFT JOIN role r ON r.uuid = tr.role_uuid
        WHERE t.`lft` &lt; #{lft}
          and t.`rht` > #{rht}
    </select>

    <insert id="insertRole" parameterType="codedriver.framework.dto.RoleVo">
        INSERT INTO `role` (`id`, `uuid`, `name`, `description`)
        VALUES (#{id}, #{uuid}, #{name}, #{description})
    </insert>

    <insert id="insertRoleUser" parameterType="codedriver.framework.dto.RoleUserVo">
        REPLACE INTO `user_role` (`user_uuid`, `role_uuid`)
        VALUES (#{userUuid}, #{roleUuid})
    </insert>

    <insert id="insertRoleTeam" parameterType="codedriver.framework.dto.RoleTeamVo">
        INSERT IGNORE INTO `team_role` (`team_uuid`, `role_uuid`, `checked_children`)
        VALUES (#{teamUuid}, #{roleUuid}, #{checkedChildren})
    </insert>

    <insert id="insertRoleTeamList" parameterType="java.util.List">
        INSERT INTO `team_role` (`team_uuid`, `role_uuid`, `checked_children`) VALUES
        <foreach collection="list" item="roleTeam" separator=",">
            (#{roleTeam.teamUuid}, #{roleTeam.roleUuid}, #{roleTeam.checkedChildren})
        </foreach>
    </insert>

    <insert id="insertRoleAuth" parameterType="codedriver.framework.dto.RoleAuthVo">
        INSERT INTO `role_authority` (`role_uuid`,
                                      `auth_group`,
                                      `auth`)
        VALUES (#{roleUuid},
                #{authGroup},
                #{auth})
    </insert>

    <update id="updateRole" parameterType="codedriver.framework.dto.RoleVo">
        UPDATE `role`
        SET `name`        = #{name},
            `description` = #{description}
        WHERE `uuid` = #{uuid}
    </update>

    <update id="updateTeamRole" parameterType="codedriver.framework.dto.RoleTeamVo">
        UPDATE `team_role`
        set `checked_children` = #{checkedChildren}
        WHERE `role_uuid` = #{roleUuid}
          AND `team_uuid` = #{teamUuid}
    </update>

    <delete id="deleteRoleByUuid" parameterType="java.lang.String">
        DELETE
        FROM `role`
        WHERE `uuid` = #{value}
    </delete>

    <delete id="deleteRoleAuthByRoleUuid" parameterType="string">
        DELETE
        FROM `role_authority`
        WHERE `role_uuid` = #{roleUuid}
    </delete>

    <delete id="deleteRoleAuth" parameterType="codedriver.framework.dto.RoleAuthVo">
        DELETE
        FROM `role_authority`
        <where>
            <if test="roleUuid != null and roleUuid != ''">
                AND `role_uuid` = #{roleUuid}
            </if>
            <if test="auth != null and auth != ''">
                AND `auth` = #{auth}
            </if>
        </where>

    </delete>

    <delete id="deleteMenuRoleByRoleUuid" parameterType="java.lang.String">
        DELETE
        FROM `menu_role`
        WHERE `role_uuid` = #{value}
    </delete>

    <delete id="deleteTeamRoleByRoleUuid" parameterType="java.lang.String">
        DELETE
        FROM `team_role`
        WHERE `role_uuid` = #{value}
    </delete>

    <delete id="deleteRoleAuthByAuth" parameterType="string">
        DELETE
        FROM `role_authority`
        WHERE `auth` = #{auth}
    </delete>

    <delete id="deleteRoleUser" parameterType="codedriver.framework.dto.RoleUserVo">
        DELETE FROM `user_role`
        WHERE `role_uuid` = #{roleUuid}
        <if test="userUuid != null and userUuid != ''">
            AND `user_uuid` = #{userUuid}
        </if>
    </delete>

    <delete id="deleteTeamRoleByRoleUuidAndTeamUuidList">
        DELETE FROM `team_role`
        WHERE `role_uuid` = #{roleUuid}
        AND `team_uuid` IN
        <foreach collection="teamUuidList" item="teamUuid" open="(" separator="," close=")">
            #{teamUuid}
        </foreach>
    </delete>

    <delete id="deleteTeamRole" parameterType="codedriver.framework.dto.RoleTeamVo">
        DELETE
        FROM `team_role`
        WHERE `role_uuid` = #{roleUuid}
          AND `team_uuid` = #{teamUuid}
    </delete>
</mapper>
