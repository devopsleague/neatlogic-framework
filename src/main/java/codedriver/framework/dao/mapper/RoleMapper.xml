<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.dao.mapper.RoleMapper">
	<cache type="codedriver.framework.dao.cache.CodeDriverCache" flushInterval="30000" size="100"></cache>

	<select id="getRoleUuidListByAuth" resultType="java.lang.String" useCache="true">
		SELECT
		`role_uuid`
		FROM
		`role_authority`
		WHERE auth IN
		<foreach collection="authList" item="item" open="(" separator="," close=")">#{item}</foreach>
	</select>

	<select id="checkRoleIsExists" parameterType="java.lang.String" resultType="int" useCache="false">
		SELECT COUNT(`uuid`) FROM `role` WHERE `uuid` = #{uuid}
	</select>

	<resultMap id="roleMap" type="codedriver.framework.dto.RoleVo">
		<id column="uuid" property="uuid" />
		<result column="name" property="name" />
		<result column="description" property="description" />
	</resultMap>

	<select id="searchRole" parameterType="codedriver.framework.dto.RoleVo" resultMap="roleMap" useCache="false">
		SELECT
		a.`uuid`,
		a.`name`,
		a.`description`,
		COUNT(DISTINCT (b.`user_uuid`)) as userCount
		FROM `role` a
		LEFT JOIN `user_role` b ON a.`uuid` = b.`role_uuid`
		LEFT JOIN `role_authority` c ON a.`uuid` = c.`role_uuid`
		WHERE
		1=1
		<if test="keyword != null and keyword != ''">
			AND (name LIKE CONCAT('%',#{keyword}, '%') OR description LIKE CONCAT('%',#{keyword}, '%'))
		</if>
		<if test="authGroup != null and authGroup != ''">
			AND c.`auth_group` = #{authGroup}
		</if>
		<if test="auth != null and auth != ''">
			AND c.`auth` = #{auth}
		</if>
		GROUP BY a.`uuid`
		ORDER BY a.`id` DESC
		<if test="needPage == true">
			LIMIT #{startNum}, #{pageSize}
		</if>
	</select>

	<select id="searchRoleForSelect" parameterType="codedriver.framework.dto.RoleVo" resultType="codedriver.framework.common.dto.ValueTextVo" useCache="false">
		SELECT
		CONCAT("role#",a.`uuid`) AS `value`,
		a.`name` as `text`
		FROM `role` a
		WHERE
		1=1
		<if test="keyword != null and keyword != ''">
			AND (a.`name` LIKE CONCAT('%',#{keyword}, '%') OR a.`description` LIKE CONCAT('%',#{keyword}, '%'))
		</if>
		<if test="needPage == true">
			LIMIT #{startNum}, #{pageSize}
		</if>
	</select>

	<select id="searchRoleAuthByRoleUuid" parameterType="String" resultType="codedriver.framework.dto.RoleAuthVo" useCache="false">
		SELECT
		`role_uuid` as `roleUuid`,
		`auth_group` as `authGroup`,
		`auth`
		FROM `role_authority`
		WHERE `role_uuid` = #{roleUuid}
	</select>

	<select id="searchRoleCount" parameterType="codedriver.framework.dto.RoleVo" resultType="int" useCache="false">
		SELECT
		COUNT(DISTINCT (a.`uuid`))
		FROM `role` a
		LEFT JOIN `role_authority` b ON a.`uuid` = b.`role_uuid`
		WHERE
		1=1
		<if test="keyword != null and keyword != ''">
			AND (a.`name` LIKE CONCAT('%', #{keyword}, '%') OR a.`description` LIKE CONCAT('%', #{keyword}, '%'))
		</if>
		<if test="authGroup != null and authGroup != ''">
			AND b.`auth_group` = #{authGroup}
		</if>
		<if test="auth != null and auth != ''">
			AND b.`auth` = #{auth}
		</if>
	</select>

	<select id="searchRoleUserCountByRoleUuid" parameterType="java.lang.String" resultType="int" useCache="false">
		SELECT
		COUNT(1)
		FROM
		`user_role`
		WHERE `role_uuid` = #{value}
	</select>

	<select id="getRoleByUuid" parameterType="java.lang.String" resultType="codedriver.framework.dto.RoleVo" useCache="false">
		SELECT
		`uuid`,
		`name`,
		`description`
		FROM `role`
		WHERE `uuid` = #{value}
	</select>

	<select id="getRoleByUuidList" parameterType="java.lang.String" resultType="codedriver.framework.dto.RoleVo" useCache="false">
		SELECT
		`uuid`,
		`name`,
		`description`
		FROM `role`
		WHERE `uuid` in
		<foreach collection="list" item="item" separator="," open="(" close=")">
			#{item}
		</foreach>
	</select>

	<select id="getRoleCountByAuth" resultType="codedriver.framework.dto.AuthVo" useCache="false">
		SELECT
		`auth` as `name`,
		COUNT(DISTINCT(`role_uuid`)) as `roleCount`
		FROM `role_authority`
		GROUP BY `auth`, `auth_group`
	</select>

	<select id="getRoleUuidByName" parameterType="java.lang.String" resultType="java.lang.String">
		select
		`uuid`
		from `role`
		where `name` = #{value}
	</select>

	<insert id="insertRole" parameterType="codedriver.framework.dto.RoleVo">
		INSERT INTO `role` (`uuid`, `name`, `description`)
		VALUES (#{uuid}, #{name}, #{description})
	</insert>

	<insert id="insertRoleUser" parameterType="codedriver.framework.dto.UserVo">
		INSERT INTO `user_role` (`user_uuid`, `role_uuid`)
		VALUES
		(#{userUuid}, #{roleUuid})
	</insert>

	<insert id="insertRoleAuth" parameterType="codedriver.framework.dto.RoleAuthVo">
		INSERT INTO `role_authority` (
		`role_uuid`,
		`auth_group`,
		`auth`
		) VALUES (
		#{roleUuid},
		#{authGroup},
		#{auth}
		)
	</insert>

	<update id="updateRole" parameterType="codedriver.framework.dto.RoleVo">
		UPDATE `role`
		SET
		`name` = #{name},
		`description` = #{description}
		WHERE `uuid` = #{uuid}
	</update>

	<delete id="deleteRoleByUuid" parameterType="java.lang.String">
		DELETE FROM `role` WHERE `uuid` = #{value}
	</delete>

	<delete id="deleteRoleAuthByRoleUuid" parameterType="string">
		DELETE FROM `role_authority` WHERE `role_uuid` = #{roleUuid}
	</delete>

	<delete id="deleteRoleAuth" parameterType="codedriver.framework.dto.RoleAuthVo">
		DELETE
		FROM `role_authority`
		<where>
			<if test="roleUuid != null and roleUuid != ''">
				AND `role_uuid` = #{roleUuid}
			</if>
			<if test="auth != null and auth != ''">
				AND `auth` = #{auth}
			</if>
		</where>

	</delete>

	<delete id="deleteMenuRoleByRoleUuid" parameterType="java.lang.String">
		DELETE FROM `menu_role` WHERE `role_uuid` = #{value}
	</delete>

	<delete id="deleteTeamRoleByRoleUuid" parameterType="java.lang.String">
		DELETE FROM `team_role` WHERE `role_uuid` = #{value}
	</delete>

	<delete id="deleteRoleAuthByAuth" parameterType="string">
		DELETE FROM `role_authority` WHERE `auth` = #{auth}
	</delete>

	<delete id="deleteRoleUser" parameterType="codedriver.framework.dto.RoleUserVo">
		DELETE FROM `user_role`
		WHERE `role_uuid` = #{roleUuid}
		<if test="userUuid != null and userUuid != ''">
			AND `user_uuid` = #{userUuid}
		</if>
	</delete>
</mapper>
