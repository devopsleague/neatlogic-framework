<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.scheduler.dao.mapper.SchedulerMapper">

	<resultMap id="jobDetailMap" type="codedriver.framework.scheduler.dto.JobVo">
		<id column="uuid" property="uuid" />
		<result column="name" property="name" />
		<result column="className" property="className" />
		<result column="cron" property="cron" />
		<result column="isActive" property="isActive" />
		<result column="needAudit" property="needAudit" />
		<result column="beginTime" property="beginTime" />
		<result column="endTime" property="endTime" />
	</resultMap>


	<select id="getJobBaseInfoByUuid" parameterType="java.lang.String" resultType="codedriver.framework.scheduler.dto.JobVo">
		SELECT
		`uuid`,
		`name`,
		`classname` AS className,
		DATE_FORMAT(`begin_time`, '%Y-%m-%d %H:%i:%s') AS beginTime,
		DATE_FORMAT(`end_time`, '%Y-%m-%d %H:%i:%s') AS endTime,
		`cron`,
		`is_active` AS isActive,
		`need_audit` AS needAudit
		FROM
		`schedule_job`
		WHERE `uuid` = #{value}
	</select>


	<select id="getJobStatusByJobNameGroup" resultType="codedriver.framework.scheduler.dto.JobStatusVo">
		SELECT
		`job_name` as jobName,
		`job_group` as jobGroup,
		`classname` as className,
		DATE_FORMAT(last_fire_time, '%Y-%m-%d %H:%i:%s') as lastFireTime,
		DATE_FORMAT(last_finish_time, '%Y-%m-%d %H:%i:%s') as lastFinishTime,
		DATE_FORMAT(next_fire_time, '%Y-%m-%d %H:%i:%s') as nextFireTime,
		exec_count as execCount
		FROM schedule_job_status
		WHERE job_name = #{jobName}
		AND job_group = #{jobGroup}
	</select>

	<select id="getJobByClassName" parameterType="java.lang.String" resultType="codedriver.framework.scheduler.dto.JobVo">
		SELECT
		`uuid`,
		`name`,
		`classname`,
		DATE_FORMAT(`begin_time`, '%Y-%m-%d %H:%i:%s') AS beginTime,
		DATE_FORMAT(`end_time`, '%Y-%m-%d %H:%i:%s') AS endTime,
		`cron`,
		`is_active` AS isActive,
		`need_audit` AS needAudit
		FROM
		`schedule_job`
		WHERE
		`classname` = #{value}
	</select>

	<select id="searchJobCount" resultType="int">
		SELECT
		count(1)
		FROM schedule_job a
		WHERE
		1=1
		<if test="keyword != null and keyword != ''">
			AND a.name like CONCAT('%',#{keyword}, '%')
		</if>
		<if test="className != null and className != ''">
			AND a.className = #{className}
		</if>
	</select>

	<select id="searchJob" resultMap="jobDetailMap">
		SELECT
		a.uuid,
		a.name,
		a.classname as className,
		DATE_FORMAT(a.`begin_time`, '%Y-%m-%d %H:%i:%s') AS beginTime,
		DATE_FORMAT(a.`end_time`, '%Y-%m-%d %H:%i:%s') AS endTime,
		a.cron,
		a.is_active as isActive,
		a.need_audit as needAudit,
		sjs.job_name as jobName,
		sjs.job_group as jobGroup,
		DATE_FORMAT(sjs.last_fire_time, '%Y-%m-%d %H:%i:%s') as lastFireTime,
		DATE_FORMAT(sjs.last_finish_time, '%Y-%m-%d %H:%i:%s') as lastFinishTime,
		DATE_FORMAT(sjs.next_fire_time, '%Y-%m-%d %H:%i:%s') as nextFireTime,
		sjs.exec_count as execCount
		FROM schedule_job a LEFT JOIN schedule_job_status sjs ON a.uuid = sjs.job_name
		WHERE
		1=1
		<if test="keyword != null and keyword != ''">
			AND a.name like CONCAT('%',#{keyword}, '%')
		</if>
		<if test="className != null and className != ''">
			AND a.className = #{className}
		</if>
		limit #{startNum}, #{pageSize}
	</select>

	<select id="checkJobNameIsExists" parameterType="codedriver.framework.scheduler.dto.JobVo" resultType="int">
		SELECT COUNT(1) FROM `schedule_job` WHERE `name` = #{name} AND `uuid` != #{uuid}
	</select>

	<select id="searchJobAuditCount" parameterType="codedriver.framework.scheduler.dto.JobAuditVo" resultType="int">
		SELECT count(1) FROM schedule_job_audit WHERE job_uuid = #{jobUuid}
	</select>

	<select id="searchJobAudit" parameterType="codedriver.framework.scheduler.dto.JobAuditVo" resultType="codedriver.framework.scheduler.dto.JobAuditVo">
		SELECT
		id,
		job_uuid AS jobUuid,
		DATE_FORMAT(`start_time`, '%Y-%m-%d %H:%i:%s') AS startTime,
		DATE_FORMAT(`end_time`, '%Y-%m-%d %H:%i:%s') AS endTime,
		status AS status
		FROM schedule_job_audit
		WHERE job_uuid = #{jobUuid}
		ORDER BY id DESC
		LIMIT #{startNum}, #{pageSize}
	</select>

	<select id="getJobAuditById" parameterType="java.lang.Long" resultType="codedriver.framework.scheduler.dto.JobAuditVo">
		SELECT
		`id`,
		`job_uuid` AS jobUuid,
		DATE_FORMAT(a.`start_time`, '%Y-%m-%d %H:%i:%s') AS startTime,
		DATE_FORMAT(a.`end_time`, '%Y-%m-%d %H:%i:%s') AS endTime,
		`content`,
		`status`,
		`server_id` AS serverId
		FROM
		`schedule_job_audit`
		WHERE
		id = #{value}
	</select>


	<select id="getJobLockByJobNameGroup" resultType="codedriver.framework.scheduler.dto.JobLockVo">
		SELECT
		`job_name` as jobName,
		`job_group` as jobGroup,
		`job_classname` as jobClassName,
		`lock`,
		`server_id` as serverId
		FROM
		`schedule_job_lock`
		WHERE
		job_name = #{jobName}
		AND
		job_group = #{jobGroup}
		FOR UPDATE
	</select>

	<select id="getJobLockByServerId" parameterType="java.lang.Integer" resultType="codedriver.framework.scheduler.dto.JobLockVo">
		SELECT
		`job_name` as jobName,
		`job_group` as jobGroup,
		`job_classname` as jobClassName,
		`lock`,
		`server_id` as serverId
		FROM
		`schedule_job_lock`
		WHERE
		server_id = #{value}
	</select>

	<update id="resetJobLockByServerId" parameterType="java.lang.Integer">
		UPDATE
		`schedule_job_lock`
		SET
		`lock` = 'waiting'
		WHERE
		`server_id` = #{value}
		AND
		`lock` = 'running'
	</update>

	<update id="updateJob" parameterType="codedriver.framework.scheduler.dto.JobVo">
		UPDATE schedule_job
		SET
		name = #{name},
		begin_time = #{beginTime},
		end_time = #{endTime},
		cron = #{cron},
		is_active = #{isActive},
		need_audit = #{needAudit}
		WHERE
		uuid = #{uuid}
	</update>

	<update id="updateJobStatus" parameterType="codedriver.framework.scheduler.dto.JobStatusVo">
		UPDATE schedule_job_status
		SET
		next_fire_time = #{nextFireTime},
		last_finish_time = #{lastFinishTime},
		last_fire_time = #{lastFireTime},
		exec_count = #{execCount}
		WHERE
		job_name = #{jobName}
		AND
		job_group = #{jobGroup}
	</update>

	<update id="updateJobAudit" parameterType="codedriver.framework.scheduler.dto.JobAuditVo">
		UPDATE schedule_job_audit
		SET
		end_time = now(),
		status = #{status},
		content = #{content}
		WHERE id = #{id}
	</update>

	<update id="updateJobLock" parameterType="codedriver.framework.scheduler.dto.JobLockVo">
		UPDATE `schedule_job_lock`
		SET
		`server_id` = #{serverId},
		`lock` = #{lock}
		WHERE job_name = #{jobName}
		AND job_group = #{jobGroup}
	</update>

	<update id="updateJobLockByServerId">
		UPDATE `schedule_job_lock` SET `lock`=#{lock} WHERE `server_id`=#{serverId}
	</update>

	<insert id="insertJob" parameterType="codedriver.framework.scheduler.dto.JobVo">
		INSERT INTO schedule_job
		(
		`uuid`,
		`name`,
		`classname`,
		begin_time,
		end_time,
		cron,
		is_active,
		need_audit
		) VALUES (
		#{uuid},
		#{name},
		#{className},
		#{beginTime},
		#{endTime},
		#{cron},
		#{isActive},
		#{needAudit}
		)
	</insert>

	<insert id="insertJobStatus" parameterType="codedriver.framework.scheduler.dto.JobStatusVo">
		INSERT INTO schedule_job_status
		(
		`job_name`,
		`job_group`,
		`classname`,
		`next_fire_time`
		) VALUES (
		#{jobName},
		#{jobGroup},
		#{className},
		#{nextFireTime}
		)
	</insert>

	<insert id="insertJobProp">
		INSERT schedule_job_prop (job_uuid, prop_name, prop_value)
		VALUES (#{jobUuid}, #{name}, #{value})
	</insert>

	<insert id="insertJobAudit" parameterType="codedriver.framework.scheduler.dto.JobAuditVo" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		INSERT INTO schedule_job_audit (job_uuid,start_time,status,server_id)
		VALUES (#{jobUuid},now(),#{status},#{serverId})
	</insert>

	<insert id="insertJobLock" parameterType="codedriver.framework.scheduler.dto.JobLockVo">
		INSERT INTO `schedule_job_lock` (
		`job_name`,
		`job_group`,
		`job_classname`,
		`lock`,
		`server_id`
		)
		VALUES
		(
		#{jobName},
		#{jobGroup},
		#{jobClassName},
		#{lock},
		#{serverId}
		)
	</insert>

	<delete id="deleteJobAuditByJobUuid" parameterType="java.lang.String">
		DELETE
		FROM
		`schedule_job_audit`
		WHERE `job_uuid` = #{value}
	</delete>

	<delete id="deleteJobPropByJobUuid" parameterType="java.lang.String">
		DELETE
		FROM
		`schedule_job_prop`
		WHERE `job_uuid` = #{value}
	</delete>

	<delete id="deleteJobByUuid" parameterType="java.lang.String">
		DELETE
		FROM
		`schedule_job`
		WHERE `uuid` = #{value}
	</delete>

	<delete id="deleteJobStatus">
		DELETE
		FROM
		`schedule_job_status`
		WHERE `job_name` = #{jobName}
		AND `job_group` = #{jobGroup}
	</delete>

	<delete id="deleteJobLock">
		DELETE
		FROM
		`schedule_job_lock`
		WHERE `job_name` = #{jobName}
		AND `job_group` = #{jobGroup}
	</delete>
</mapper>
