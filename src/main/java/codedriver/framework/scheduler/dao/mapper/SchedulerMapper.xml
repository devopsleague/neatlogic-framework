<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.scheduler.dao.mapper.SchedulerMapper">

	<resultMap id="jobMap" type="codedriver.framework.scheduler.dto.JobVo">
		<id column="uuid" property="uuid" />
		<result column="name" property="name" />
		<result column="handler" property="handler" />
		<result column="cron" property="cron" />
		<result column="is_active" property="isActive" />
		<result column="need_audit" property="needAudit" />
		<result column="begin_time" property="beginTime" />
		<result column="end_time" property="endTime" />
		<collection property="propList" ofType="codedriver.framework.scheduler.dto.JobPropVo">
			<id column="prop_id" property="id" />
			<result column="prop_name" property="name" />
			<result column="prop_value" property="value" />
		</collection>
	</resultMap>

	<select id="getJobByUuid" parameterType="java.lang.String" resultMap="jobMap">
		SELECT
		a.uuid,
		a.name,
		a.handler,
		a.begin_time,
		a.end_time,
		a.cron,
		a.is_active,
		a.need_audit,
		d.prop_name,
		d.prop_value,
		d.id as prop_id
		FROM schedule_job a
		LEFT JOIN schedule_job_prop d ON a.uuid = d.job_uuid
		WHERE a.uuid = #{uuid}
	</select>

	<select id="getJobBaseInfoByUuid" parameterType="java.lang.String" resultType="codedriver.framework.scheduler.dto.JobVo">
		SELECT
		`uuid`,
		`name`,
		`handler`,
		`begin_time` AS beginTime,
		`end_time` AS endTime,
		`cron`,
		`is_active` AS isActive,
		`need_audit` AS needAudit
		FROM
		`schedule_job`
		WHERE `uuid` = #{value}
	</select>


	<select id="getJobStatusByJobNameGroup" resultType="codedriver.framework.scheduler.dto.JobStatusVo">
		SELECT
		`job_name` as jobName,
		`job_group` as jobGroup,
		`handler`,
		`last_fire_time` as lastFireTime,
		`last_finish_time` as lastFinishTime,
		`next_fire_time` as nextFireTime,
		`exec_count` as execCount
		FROM `schedule_job_status`
		WHERE `job_name` = #{jobName}
		AND `job_group` = #{jobGroup}
	</select>

	<select id="getJobByHandler" parameterType="java.lang.String" resultType="codedriver.framework.scheduler.dto.JobVo">
		SELECT
		`uuid`,
		`name`,
		`handler`,
		`begin_time` AS beginTime,
		`end_time` AS endTime,
		`cron`,
		`is_active` AS isActive,
		`need_audit` AS needAudit
		FROM
		`schedule_job`
		WHERE
		`handler` = #{value}
	</select>

	<select id="searchJobCount" resultType="int">
		SELECT
		count(1)
		FROM schedule_job a
		WHERE
		1=1
		<if test="keyword != null and keyword != ''">
			AND a.name like CONCAT('%',#{keyword}, '%')
		</if>
		<if test="handler != null and handler != ''">
			AND a.handler = #{handler}
		</if>
	</select>

	<resultMap id="jobDetailMap" type="codedriver.framework.scheduler.dto.JobVo">
		<id column="uuid" property="uuid" />
		<result column="name" property="name" />
		<result column="handler" property="handler" />
		<result column="cron" property="cron" />
		<result column="is_active" property="isActive" />
		<result column="need_audit" property="needAudit" />
		<result column="begin_time" property="beginTime" />
		<result column="end_time" property="endTime" />
		<association property="jobStatus" resultMap="jobStatusMap" />
	</resultMap>

	<resultMap id="jobStatusMap" type="codedriver.framework.scheduler.dto.JobStatusVo">
		<result column="job_name" property="jobName" />
		<result column="job_group" property="jobGroup" />
		<result column="handler" property="handler" />
		<result column="next_fire_time" property="nextFireTime" />
		<result column="last_fire_time" property="lastFireTime" />
		<result column="last_finish_time" property="lastFinishTime" />
		<result column="exec_count" property="execCount" />
	</resultMap>

	<select id="searchJob" resultMap="jobDetailMap">
		SELECT
		a.`uuid`,
		a.name,
		a.handler,
		a.`begin_time`,
		a.`end_time`,
		a.cron,
		a.is_active,
		a.need_audit,
		sjs.job_name,
		sjs.job_group,
		sjs.last_fire_time,
		sjs.last_finish_time,
		sjs.next_fire_time,
		sjs.exec_count
		FROM schedule_job a
		LEFT JOIN schedule_job_status sjs ON a.uuid = sjs.job_name
		WHERE
		1=1
		<if test="keyword != null and keyword != ''">
			AND a.name like CONCAT('%',#{keyword}, '%')
		</if>
		<if test="handler != null and handler != ''">
			AND a.handler = #{handler}
		</if>
		ORDER BY a.`fcd` DESC
		limit #{startNum}, #{pageSize}
	</select>

	<select id="checkJobNameIsExists" parameterType="codedriver.framework.scheduler.dto.JobVo" resultType="int">
		SELECT COUNT(1) FROM `schedule_job` WHERE `name` = #{name} AND `uuid` != #{uuid}
	</select>

	<select id="searchJobAuditCount" parameterType="codedriver.framework.scheduler.dto.JobAuditVo" resultType="int">
		SELECT count(1) FROM schedule_job_audit WHERE job_uuid = #{jobUuid}
	</select>

	<select id="searchJobAudit" parameterType="codedriver.framework.scheduler.dto.JobAuditVo" resultType="codedriver.framework.scheduler.dto.JobAuditVo">
		SELECT
		id,
		`job_uuid` AS jobUuid,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`status`,
		server_id AS serverId,
		content_hash AS contentHash
		FROM `schedule_job_audit`
		WHERE `job_uuid` = #{jobUuid}
		ORDER BY `id` DESC
		LIMIT #{startNum}, #{pageSize}
	</select>

	<select id="getJobAuditById" parameterType="java.lang.Long" resultType="codedriver.framework.scheduler.dto.JobAuditVo">
		SELECT
		`id`,
		`job_uuid` AS jobUuid,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`content_hash` AS contentHash,
		b.`content`,
		`status`,
		`server_id` AS serverId
		FROM
		`schedule_job_audit` a
		LEFT JOIN 
		`schedule_job_audit_detail` b ON a.content_hash = b.hash
		WHERE
		id = #{value}
	</select>
	
	<select id="getJobAuditByUuid" parameterType="java.lang.String" resultType="codedriver.framework.scheduler.dto.JobAuditVo">
		SELECT
		`id`,
		`job_uuid` AS jobUuid,
		`start_time` AS startTime,
		`end_time` AS endTime,
		`content_hash` AS contentHash,
		b.`content`,
		`status`,
		`server_id` AS serverId
		FROM
		`schedule_job_audit` a
		LEFT JOIN 
		`schedule_job_audit_detail` b ON a.content_hash = b.hash
		WHERE
		job_uuid = #{value}
	</select>


	<select id="getJobLockByJobNameGroup" resultType="codedriver.framework.scheduler.dto.JobLockVo">
		SELECT
		`job_name` as jobName,
		`job_group` as jobGroup,
		`job_handler` as jobHandler,
		`lock`,
		`server_id` as serverId
		FROM
		`schedule_job_lock`
		WHERE
		job_name = #{jobName}
		AND
		job_group = #{jobGroup}
		FOR UPDATE
	</select>

	<select id="getJobLockByServerId" parameterType="java.lang.Integer" resultType="codedriver.framework.scheduler.dto.JobLockVo">
		SELECT
		`job_name` as jobName,
		`job_group` as jobGroup,
		`job_handler` as jobHandler,
		`lock`,
		`server_id` as serverId
		FROM
		`schedule_job_lock`
		WHERE
		server_id = #{value}
	</select>

	<update id="resetJobLockByServerId" parameterType="java.lang.Integer">
		UPDATE
		`schedule_job_lock`
		SET
		`lock` = 'waiting'
		WHERE
		`server_id` = #{value}
		AND
		`lock` = 'running'
	</update>

	<update id="updateJob" parameterType="codedriver.framework.scheduler.dto.JobVo">
		UPDATE schedule_job
		SET
		name = #{name},
		begin_time = #{beginTime},
		end_time = #{endTime},
		cron = #{cron},
		is_active = #{isActive},
		need_audit = #{needAudit}
		WHERE
		uuid = #{uuid}
	</update>

	<update id="updateJobStatus" parameterType="codedriver.framework.scheduler.dto.JobStatusVo">
		UPDATE schedule_job_status
		SET
		next_fire_time = #{nextFireTime},
		last_finish_time = #{lastFinishTime},
		last_fire_time = #{lastFireTime},
		exec_count = #{execCount}
		WHERE
		job_name = #{jobName}
		AND
		job_group = #{jobGroup}
	</update>

	<update id="updateJobAudit" parameterType="codedriver.framework.scheduler.dto.JobAuditVo">
		UPDATE schedule_job_audit
		SET
		end_time = now(),
		status = #{status},
		content_hash = #{contentHash}
		WHERE id = #{id}
	</update>

	<update id="updateJobLock" parameterType="codedriver.framework.scheduler.dto.JobLockVo">
		UPDATE `schedule_job_lock`
		SET
		`server_id` = #{serverId},
		`lock` = #{lock}
		WHERE job_name = #{jobName}
		AND job_group = #{jobGroup}
	</update>

	<update id="updateJobLockByServerId">
		UPDATE `schedule_job_lock` SET `lock`=#{lock} WHERE `server_id`=#{serverId}
	</update>

	<insert id="replaceJobAuditDetail">
		REPLACE INTO schedule_job_audit_detail (hash, content) values (#{hash}, #{content})
	</insert>

	<insert id="insertJob" parameterType="codedriver.framework.scheduler.dto.JobVo">
		INSERT INTO schedule_job
		(
		`uuid`,
		`name`,
		`handler`,
		`begin_time`,
		`end_time`,
		`cron`,
		`is_active`,
		`need_audit`,
		`fcd`
		) VALUES (
		#{uuid},
		#{name},
		#{handler},
		#{beginTime},
		#{endTime},
		#{cron},
		#{isActive},
		#{needAudit},
		NOW()
		)
	</insert>

	<insert id="insertJobStatus" parameterType="codedriver.framework.scheduler.dto.JobStatusVo">
		INSERT INTO schedule_job_status
		(
		`job_name`,
		`job_group`,
		`handler`,
		`next_fire_time`
		) VALUES (
		#{jobName},
		#{jobGroup},
		#{handler},
		#{nextFireTime}
		)
	</insert>

	<insert id="insertJobProp">
		INSERT schedule_job_prop (job_uuid, prop_name, prop_value)
		VALUES (#{jobUuid}, #{name}, #{value})
	</insert>

	<insert id="insertJobAudit" parameterType="codedriver.framework.scheduler.dto.JobAuditVo">
		INSERT INTO schedule_job_audit (id, job_uuid,start_time,status,server_id)
		VALUES (#{id},#{jobUuid},now(),#{status},#{serverId})
	</insert>

	<insert id="insertJobLock" parameterType="codedriver.framework.scheduler.dto.JobLockVo">
		INSERT INTO `schedule_job_lock` (
		`job_name`,
		`job_group`,
		`job_handler`,
		`lock`,
		`server_id`
		)
		VALUES
		(
		#{jobName},
		#{jobGroup},
		#{jobHandler},
		#{lock},
		#{serverId}
		)
	</insert>

	<delete id="deleteJobAuditByJobUuid" parameterType="java.lang.String">
		DELETE
		FROM
		`schedule_job_audit`
		WHERE `job_uuid` = #{value}
	</delete>

	<delete id="deleteJobPropByJobUuid" parameterType="java.lang.String">
		DELETE
		FROM
		`schedule_job_prop`
		WHERE `job_uuid` = #{value}
	</delete>

	<delete id="deleteJobByUuid" parameterType="java.lang.String">
		DELETE
		FROM
		`schedule_job`
		WHERE `uuid` = #{value}
	</delete>

	<delete id="deleteJobStatus">
		DELETE
		FROM
		`schedule_job_status`
		WHERE `job_name` = #{jobName}
		AND `job_group` = #{jobGroup}
	</delete>

	<delete id="deleteJobLock">
		DELETE
		FROM
		`schedule_job_lock`
		WHERE `job_name` = #{jobName}
		AND `job_group` = #{jobGroup}
	</delete>
</mapper>
