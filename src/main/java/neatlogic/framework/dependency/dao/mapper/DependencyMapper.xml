<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright(c) $today.year NeatLogic Co., Ltd. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.framework.dependency.dao.mapper.DependencyMapper">

    <select id="getCallerListByCallee" resultType="java.util.HashMap">
        SELECT *
        FROM `${tableName}`
        WHERE `${calleeField}` = #{callee} LIMIT #{startNum}
            , #{pageSize}
    </select>

    <select id="getCallerCountByCallee" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `${tableName}`
        WHERE `${calleeField}` = #{callee}
    </select>

    <select id="getBatchCallerCountByCallee" resultType="java.util.Map">
        SELECT `${calleeField}` as caller,
        COUNT(1) as callerCount
        FROM `${tableName}`
        WHERE `${calleeField}` in
        <foreach collection="callee" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        GROUP BY `${calleeField}`
    </select>

    <insert id="insertIgnoreDependencyForCallerField">
        INSERT
        IGNORE INTO `${tableName}` (`${callerField}`, `${calleeField}`)
        VALUES (
        #{caller},
        #{callee}
        )
    </insert>

    <insert id="insertIgnoreDependencyForCallerFieldList">
        INSERT IGNORE INTO `${tableName}` (`${calleeField}`,
        <foreach collection="callerFieldList" item="callerField" separator=",">
            `${callerField}`
        </foreach>
        )
        VALUES (#{callee},
        <foreach collection="callerArray" item="caller" separator=",">
            #{caller}
        </foreach>
        )
    </insert>

    <delete id="deleteDependencyByCaller">
        DELETE
        FROM `${tableName}`
        WHERE `${callerField}` = #{caller}
    </delete>

    <delete id="deleteDependencyByCallee">
        DELETE
        FROM `${tableName}`
        WHERE `${calleeField}` = #{callee}
    </delete>

    <select id="getDependencyCountByFrom" resultType="int">
        SELECT COUNT(1)
        FROM `dependency`
        WHERE `from` = #{from}
          and `type` = #{type}
    </select>

    <select id="getDependencyListByFrom" resultType="neatlogic.framework.dependency.dto.DependencyVo">
        SELECT `from`,
               `type`,
               `to`,
               `config` AS configStr
        FROM `dependency`
        WHERE `from` = #{from}
          AND `type` = #{type} LIMIT #{startNum}
            , #{pageSize}
    </select>

    <select id="getBatchDependencyCountByFrom" resultType="java.util.Map">
        SELECT
        `from` as `caller`,
        count(1) as callerCount
        FROM `dependency`
        WHERE `from` in
        <foreach collection="fromList" open="(" separator="," close=")" item="from">
            #{from}
        </foreach>
        and type = #{type}
        GROUP BY `from`
    </select>

    <insert id="insertDependency" parameterType="neatlogic.framework.dependency.dto.DependencyVo">
        INSERT INTO `dependency` (`from`, `type`, `to`, `config`)
        VALUES (#{from}, #{type}, #{to}, #{configStr})
    </insert>

    <delete id="deleteDependency" parameterType="neatlogic.framework.dependency.dto.DependencyVo">
        DELETE
        FROM `dependency`
        WHERE `type` = #{type}
          AND `to` = #{to}
    </delete>


    <delete id="deleteDependencyByFrom" parameterType="neatlogic.framework.dependency.dto.DependencyVo">
        DELETE
        FROM `dependency`
        WHERE `type` = #{type}
          AND `from` = #{from}
    </delete>

</mapper>