<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright (C) 2024  深圳极向量科技有限公司 All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.framework.dependency.dao.mapper.DependencyMapper">

    <select id="getCallerListByCallee" resultType="java.util.HashMap">
        SELECT *
        FROM `${tableName}`
        WHERE `${calleeField}` = #{callee} LIMIT #{startNum}
            , #{pageSize}
    </select>

    <select id="getCallerCountByCallee" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `${tableName}`
        WHERE `${calleeField}` = #{callee}
    </select>

    <select id="getBatchCallerCountByCallee" resultType="java.util.Map">
        SELECT `${calleeField}` as caller,
        COUNT(1) as callerCount
        FROM `${tableName}`
        WHERE `${calleeField}` in
        <foreach collection="callee" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        GROUP BY `${calleeField}`
    </select>

    <insert id="insertIgnoreDependencyForCallerField">
        INSERT
        IGNORE INTO `${tableName}` (`${callerField}`, `${calleeField}`)
        VALUES (
        #{caller},
        #{callee}
        )
    </insert>

    <insert id="insertIgnoreDependencyForCallerFieldList">
        INSERT IGNORE INTO `${tableName}` (`${calleeField}`,
        <foreach collection="callerFieldList" item="callerField" separator=",">
            `${callerField}`
        </foreach>
        )
        VALUES (#{callee},
        <foreach collection="callerArray" item="caller" separator=",">
            #{caller}
        </foreach>
        )
    </insert>

    <delete id="deleteDependencyByCaller">
        DELETE
        FROM `${tableName}`
        WHERE `${callerField}` = #{caller}
    </delete>

    <delete id="deleteDependencyByCallee">
        DELETE
        FROM `${tableName}`
        WHERE `${calleeField}` = #{callee}
    </delete>

    <select id="getDependencyCountByFrom" resultType="int">
        SELECT COUNT(1)
        FROM `dependency`
        WHERE `from` = #{from}
          and `type` = #{type}
    </select>

    <select id="getDependencyListByFrom" resultType="neatlogic.framework.dependency.dto.DependencyVo">
        SELECT `from`,
               `type`,
               `to`,
               `config` AS configStr
        FROM `dependency`
        WHERE `from` = #{from}
          AND `type` = #{type} LIMIT #{startNum}
            , #{pageSize}
    </select>

    <select id="getBatchDependencyCountByFrom" resultType="java.util.Map">
        SELECT
        `from` as `caller`,
        count(1) as callerCount
        FROM `dependency`
        WHERE `from` in
        <foreach collection="fromList" open="(" separator="," close=")" item="from">
            #{from}
        </foreach>
        and type = #{type}
        GROUP BY `from`
    </select>

    <insert id="insertDependency" parameterType="neatlogic.framework.dependency.dto.DependencyVo">
        INSERT INTO `dependency` (`from`, `type`, `to`, `config`)
        VALUES (#{from}, #{type}, #{to}, #{configStr,typeHandler=CompressHandler})
        ON DUPLICATE KEY UPDATE `config` = #{configStr,typeHandler=CompressHandler}
    </insert>

    <delete id="deleteDependency" parameterType="neatlogic.framework.dependency.dto.DependencyVo">
        DELETE
        FROM `dependency`
        WHERE `type` = #{type}
          AND `to` = #{to}
    </delete>


    <delete id="deleteDependencyByFrom" parameterType="neatlogic.framework.dependency.dto.DependencyVo">
        DELETE
        FROM `dependency`
        WHERE `type` = #{type}
          AND `from` = #{from}
    </delete>

</mapper>
