<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright (C) $today.year  深圳极向量科技有限公司 All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="neatlogic.framework.lrcode.dao.mapper.TreeMapper">

    <select id="checkLeftRightCodeIsWrong" resultType="java.lang.Object">
        SELECT a.`${idKey}`
        FROM `${tableName}` a
        WHERE a.`lft` IS NULL
           OR a.`rht` IS NULL
           OR a.`lft` &lt; 2
           OR a.`rht` &lt; 3
           OR (a.`rht` - a.`lft` - 1) !=
              (SELECT COUNT(1) * 2 FROM `${tableName}` b WHERE b.`lft` &gt; a.`lft` AND b.`rht` &lt; a.`rht`)
        LIMIT 1
    </select>

    <!--    <select id="checkLeftRightCodeIsNull" resultType="java.lang.Object">-->
    <!--        SELECT `${idKey}` FROM `${tableName}`-->
    <!--        WHERE (`lft` IS NULL OR `rht` IS NULL)-->
    <!--        <if test="idValue != null">-->
    <!--            AND `${idKey}` != #{idValue}-->
    <!--        </if>-->
    <!--        limit 1-->
    <!--    </select>-->
    <!--    <select id="checkLftLt2OrRhtLt3IsExists" resultType="java.lang.Object">-->
    <!--        SELECT `${idKey}` FROM `${tableName}`  WHERE `lft` &lt; 2 OR `rht` &lt; 3 limit 1-->
    <!--    </select>-->
    <!--    <select id="checkChildLftLeParentLftOrChildRhtGeParentRhtIsExists" resultType="java.lang.Object">-->
    <!--        SELECT parent.`${idKey}` FROM `${tableName}` parent-->
    <!--        JOIN `${tableName}` child ON child.`${parentIdKey}`=parent.`${idKey}` AND (child.`lft` &lt;= parent.`lft` OR child.`rht` &gt;= parent.`rht`)-->
    <!--        limit 1-->
    <!--    </select>-->
    <!--    <select id="checkLeafNodeLeftRightCodeAreNotContinuous" resultType="java.lang.Object">-->
    <!--        SELECT parent.`${idKey}` FROM `${tableName}` parent-->
    <!--        LEFT JOIN `${tableName}` child ON child.`${parentIdKey}` = parent.`${idKey}`-->
    <!--        WHERE child.`${idKey}` IS NULL-->
    <!--        AND parent.`rht` - parent.`lft` != 1-->
    <!--        limit 1-->
    <!--    </select>-->

    <select id="getTreeNodeListByParentId" resultType="neatlogic.framework.lrcode.dto.TreeNodeVo">
        SELECT
        a.`${idKey}` AS idValue,
        a.`${parentIdKey}` AS parentIdValue,
        a.`lft`,
        a.`rht`,
        (SELECT COUNT(1) FROM `${tableName}` b WHERE b.`${parentIdKey}` = a.`${idKey}`) AS childrenCount
        FROM `${tableName}` a
        WHERE
        <choose>
            <when test="parentIdValue == null">
                a.`${parentIdKey}` = '0' OR a.`${parentIdKey}` is null
            </when>
            <otherwise>a.`${parentIdKey}` = #{parentIdValue}</otherwise>
        </choose>
        <if test="condition != null">
            and ${condition}
        </if>
        <choose>
            <when test="sortKey != null and sortKey != ''">
                ORDER BY a.`${sortKey}`
            </when>
            <otherwise>
                ORDER BY a.`lft`, a.`${idKey}`
            </otherwise>
        </choose>
    </select>

    <select id="getAncestorsAndSelfByLftRht" resultType="neatlogic.framework.lrcode.dto.TreeNodeVo" useCache="false">
        SELECT
            a.`${idKey}` as idKey,
            a.`${nameKey}` as nameKey,
            a.`${parentIdKey}` as parentIdKey,
            a.`lft`,
            a.`rht`
        FROM `${tableName}` a
        WHERE a.`lft` &lt;= #{lft} AND a.`rht` &gt;= #{rht}
        ORDER BY a.`lft` ASC
    </select>

    <select id="getTreeNodeById" resultType="neatlogic.framework.lrcode.dto.TreeNodeVo">
        SELECT `${idKey}`       AS idValue,
               `${parentIdKey}` AS parentIdValue,
               `lft`,
               `rht`
        FROM `${tableName}`
        where `${idKey}` = #{idValue}
    </select>

    <select id="getRootRht" parameterType="java.lang.String" resultType="int">
        select IFNULL(MAX(`rht`), 1) + 1
        from `${tableName}`
    </select>

    <update id="updateTreeNodeLeftRightCodeById">
        UPDATE `${tableName}`
        SET `lft` = #{lft},
            `rht` = #{rht}
        WHERE `${idKey}` = #{idValue}
    </update>

    <update id="batchUpdateTreeNodeLeftCode">
        UPDATE `${tableName}`
        set `lft` = `lft` + #{step}
        WHERE `lft` &gt;= #{minCode}
        <if test="condition != null">
            and ${condition}
        </if>
    </update>

    <update id="batchUpdateTreeNodeRightCode">
        UPDATE `${tableName}`
        set `rht` = `rht` + #{step}
        WHERE `rht` &gt;= #{minCode}
        <if test="condition != null">
            and ${condition}
        </if>
    </update>

    <update id="batchUpdateTreeNodeLeftRightCodeByLeftRightCode">
        UPDATE `${tableName}`
        SET `lft` = `lft` + #{step},
        `rht` = `rht` + #{step}
        WHERE `lft` &gt;= #{lft}
        AND `rht` &lt;= #{rht}
        <if test="condition != null">
            and ${condition}
        </if>
    </update>

    <select id="checkTreeNodeIsExistsByLeftRightCode" resultType="int" useCache="false">
        SELECT COUNT(1)
        FROM `${tableName}`
        WHERE `${idKey}` = #{idValue}
          AND `lft` &gt; #{lft}
          AND `rht` &lt; #{rht}
    </select>

    <update id="updateTreeNodeParentIdById" parameterType="neatlogic.framework.lrcode.dto.TreeNodeVo">
        UPDATE `${tableName}`
        SET `${parentIdKey}` = #{parentIdValue}
        WHERE `${idKey}` = #{idValue}
    </update>

    <update id="batchUpdateTreeNodeLeftRightCodeToNullByLeftRightCode">
        UPDATE `${tableName}`
        SET `lft` = NULL,
            `rht` = NULL
        WHERE `lft` &gt;= #{lft}
          AND `rht` &lt;= #{rht}
    </update>

    <select id="getTreeNodeList"  parameterType="neatlogic.framework.lrcode.dto.TreeNodeVo" resultType="neatlogic.framework.lrcode.dto.TreeNodeVo">
        select `${idKey}` as idKey,`${parentIdKey}` as parentIdKey,`lft`,`rht`
        FROM `${tableName}`
        ORDER BY `lft`
        <if test="needPage == true">
            LIMIT #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="getUpwardIdPathListByLftRht" resultType="java.lang.String">
        select a.`${idKey}` from `${tableName}` a where
        a.`lft` &lt;= #{lft}
        AND a.`rht` &gt;= #{rht}
        order by a.`lft`
    </select>
    <select id="getTreeNodeCount" resultType="java.lang.Integer">
        select count(`${idKey}`)
        FROM `${tableName}`
    </select>
    <select id="getUpwardNamePathListByLftRht" resultType="java.lang.String">
        select a.`${nameKey}` from `${tableName}` a where
        a.`lft` &lt;= #{lft}
        AND a.`rht` &gt;= #{rht}
        order by a.`lft`
    </select>

    <update id="updateUpwardIdPathByLftRht">
        UPDATE `${tableName}` d
        JOIN (
        SELECT b.`id` AS `id`, GROUP_CONCAT(a.`id` ORDER BY a.`lft`) AS upward_id_path
        FROM `${tableName}` a
        JOIN `${tableName}` b ON a.`lft` &lt;= b.`lft` AND a.`rht` &gt;= b.`rht`
        <where>
            <if test="lft != null">
                AND b.`lft` &gt;= #{lft}
            </if>
            <if test="rht != null">
                AND b.`rht` &lt;= #{rht}
            </if>
        </where>
        GROUP BY b.`id`
        ) c ON c.`id` = d.`id`
        SET d.`upward_id_path` = c.`upward_id_path`
    </update>

    <update id="updateUpwardNamePathByLftRht">
        UPDATE `${tableName}` d
        JOIN (
        SELECT b.`id` AS `id`, GROUP_CONCAT(a.`name` ORDER BY a.`lft` SEPARATOR '/') AS upward_name_path
        FROM `${tableName}` a
        JOIN `${tableName}` b ON a.`lft` &lt;= b.`lft` AND a.`rht` &gt;= b.`rht`
        <where>
            <if test="lft != null">
                AND b.`lft` &gt;= #{lft}
            </if>
            <if test="rht != null">
                AND b.`rht` &lt;= #{rht}
            </if>
        </where>
        GROUP BY b.`id`
        ) c ON c.`id` = d.`id`
        SET d.`upward_name_path` = c.`upward_name_path`
    </update>

    <update id="updateTreeNodeUpwardIdPathById">
        UPDATE `${tableName}` set  ${upwardIdPathKey} = #{upwardIdPath} where `${idKey}` = #{idKeyValue}
    </update>
    <update id="updateTreeNodeUpwardNamePathById">
        UPDATE `${tableName}` set ${upwardNamePathKey} = #{upwardNamePath} where `${idKey}` = #{idKeyValue}
    </update>
</mapper>
