<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.framework.matrix.dao.mapper.MatrixDataMapper">

    <select id="getDynamicTableDataCountByUuid" resultType="int">
        SELECT COUNT(1)
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        WHERE `uuid` = #{uuid}
    </select>

    <select id="getDynamicRowDataByUuid" parameterType="neatlogic.framework.matrix.dto.MatrixDataVo"
            resultType="java.util.LinkedHashMap">
        SELECT
        `uuid`,
        `sort`,
        <foreach collection="columnList" separator="," item="column">
            `${column}`
        </foreach>
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        WHERE `uuid` = #{uuid}
    </select>

    <select id="getDynamicTableDataByUuidList" parameterType="neatlogic.framework.matrix.dto.MatrixDataVo"
            resultType="java.util.LinkedHashMap">
        SELECT
        `uuid`,
        `sort`,
        <foreach collection="columnList" item="column" separator=",">
            `${column}`
        </foreach>
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        WHERE `uuid` in
        <foreach collection="defaultValue" open="(" close=")" item="uuid" separator=",">
            #{uuid}
        </foreach>
    </select>

    <select id="getDynamicTableDataCount" parameterType="neatlogic.framework.matrix.dto.MatrixDataVo"
            resultType="int">
        SELECT
        COUNT(1)
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
    </select>

    <select id="searchDynamicTableData" parameterType="neatlogic.framework.matrix.dto.MatrixDataVo"
            resultType="java.util.LinkedHashMap">
        SELECT
        `uuid`,
        `sort`,
        <foreach collection="columnList" separator="," item="column">
            `${column}`
        </foreach>
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        ORDER BY `sort` DESC
        <if test="needPage == true">
            LIMIT #{startNum}, #{pageSize}
        </if>
    </select>

    <sql id="searchDynamicTableDataSql">
        <if test="sourceColumnList != null and sourceColumnList.size() > 0">
            <foreach collection="sourceColumnList" item="sourceColumn">
                <choose>
                    <when test="sourceColumn.expression == 'equal'">
                        AND `${sourceColumn.column}` = #{sourceColumn.value}
                    </when>
                    <when test="sourceColumn.expression == 'unequal'">
                        AND `${sourceColumn.column}` != #{sourceColumn.value}
                    </when>
                    <when test="sourceColumn.expression == 'like'">
                        AND `${sourceColumn.column}` LIKE CONCAT('%', #{sourceColumn.value}, '%')
                    </when>
                    <when test="sourceColumn.expression == 'greater-than'">
                        AND `${sourceColumn.column}` &gt; #{sourceColumn.value}
                    </when>
                    <when test="sourceColumn.expression == 'less-than'">
                        AND `${sourceColumn.column}` &lt; #{sourceColumn.value}
                    </when>
                    <when test="sourceColumn.expression == 'include' and sourceColumn.valueList != null and sourceColumn.valueList.size() > 0">
                        AND `${sourceColumn.column}` IN
                        <foreach collection="sourceColumn.valueList" item="item" open="(" close=")" separator=",">
                            #{item}
                        </foreach>
                    </when>
                    <otherwise>
                        AND `${sourceColumn.column}` = #{sourceColumn.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </sql>

    <select id="getDynamicTableDataCountForTable" parameterType="neatlogic.framework.matrix.dto.MatrixDataVo"
            resultType="int">
        SELECT
        COUNT(1)
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        <where>
            <include refid="searchDynamicTableDataSql"/>
        </where>
    </select>

    <select id="getDynamicTableDataForTable" parameterType="neatlogic.framework.matrix.dto.MatrixDataVo"
            resultType="java.util.LinkedHashMap">
        SELECT
        `uuid`,
        `sort`,
        <foreach collection="columnList" item="column" separator=",">
            `${column}`
        </foreach>
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        <where>
            <include refid="searchDynamicTableDataSql"/>
        </where>
        ORDER BY `sort` DESC
        <if test="needPage == true">
            LIMIT #{startNum}, #{pageSize}
        </if>
    </select>

    <sql id="searchDynamicTableDataForSelectSql">
        <choose>
            <when test="attrType == 'user'">
                JOIN `user` b ON b.`uuid` = a.`${keywordColumn}`
            </when>
            <when test="attrType == 'team'">
                JOIN `team` c ON c.`uuid` = a.`${keywordColumn}`
            </when>
            <when test="attrType == 'role'">
                JOIN `role` d ON d.`uuid` = a.`${keywordColumn}`
            </when>
        </choose>
        <where>
            <foreach collection="columnList" item="column" separator="AND">
                a.`${column}` IS NOT NULL
            </foreach>
            <if test="keyword != null and keyword != ''">
                <choose>
                    <when test="attrType == 'input' or attrType == 'date'">
                        <if test="keywordExpression == 'like'">
                            and `${keywordColumn}` LIKE CONCAT('%', #{keyword}, '%')
                        </if>
                        <if test="keywordExpression == 'equal'">
                            and `${keywordColumn}` = #{keyword}
                        </if>
                    </when>
                    <when test="attrType == 'user'">
                        <if test="keywordExpression == 'like'">
                            and (b.`user_id` LIKE CONCAT('%', #{keyword}, '%') OR b.`user_name` LIKE CONCAT('%', #{keyword}, '%'))
                        </if>
                        <if test="keywordExpression == 'equal'">
                            and (b.`user_id` = #{keyword} OR b.`user_name` = #{keyword})
                        </if>
                    </when>
                    <when test="attrType == 'team'">
                        <if test="keywordExpression == 'like'">
                            and (c.`uuid` LIKE CONCAT('%', #{keyword}, '%') OR c.`name` LIKE CONCAT('%', #{keyword}, '%'))
                        </if>
                        <if test="keywordExpression == 'equal'">
                            and (c.`uuid` = #{keyword} OR c.`name` = #{keyword})
                        </if>
                    </when>
                    <when test="attrType == 'role'">
                        <if test="keywordExpression == 'like'">
                            and (d.`name` LIKE CONCAT('%', #{keyword}, '%') OR d.`description` LIKE CONCAT('%', #{keyword}, '%'))
                        </if>
                        <if test="keywordExpression == 'equal'">
                            and (d.`name` = #{keyword} OR d.`description` = #{keyword})
                        </if>
                    </when>
                </choose>
            </if>
            <include refid="searchDynamicTableDataSql"/>
        </where>
    </sql>

    <sql id="searchDynamicTableDataListSql">
        <if test="keyword != null and keyword != ''">
            <choose>
                <when test="attrType == 'user'">
                    JOIN `user` b ON b.`uuid` = a.`${keywordColumn}`
                </when>
                <when test="attrType == 'team'">
                    JOIN `team` c ON c.`uuid` = a.`${keywordColumn}`
                </when>
                <when test="attrType == 'role'">
                    JOIN `role` d ON d.`uuid` = a.`${keywordColumn}`
                </when>
            </choose>
        </if>
        <where>
            <if test="notNullColumnList != null and notNullColumnList.size() > 0">
            <foreach collection="notNullColumnList" item="notColumn" separator="AND">
                a.`${notColumn}` IS NOT NULL
            </foreach>
            </if>
            <if test="keyword != null and keyword != ''">
                <choose>
                    <when test="attrType == 'input' or attrType == 'date'">
                        <if test="keywordExpression == 'like'">
                            and a.`${keywordColumn}` LIKE CONCAT('%', #{keyword}, '%')
                        </if>
                        <if test="keywordExpression == 'equal'">
                            and a.`${keywordColumn}` = #{keyword}
                        </if>
                    </when>
                    <when test="attrType == 'user'">
                        <if test="keywordExpression == 'like'">
                            and (b.`user_id` LIKE CONCAT('%', #{keyword}, '%') OR b.`user_name` LIKE CONCAT('%', #{keyword}, '%'))
                        </if>
                        <if test="keywordExpression == 'equal'">
                            and (b.`user_id` = #{keyword} OR b.`user_name` = #{keyword})
                        </if>
                    </when>
                    <when test="attrType == 'team'">
                        <if test="keywordExpression == 'like'">
                            and (c.`uuid` LIKE CONCAT('%', #{keyword}, '%') OR c.`name` LIKE CONCAT('%', #{keyword}, '%'))
                        </if>
                        <if test="keywordExpression == 'equal'">
                            and (c.`uuid` = #{keyword} OR c.`name` = #{keyword})
                        </if>
                    </when>
                    <when test="attrType == 'role'">
                        <if test="keywordExpression == 'like'">
                            and (d.`name` LIKE CONCAT('%', #{keyword}, '%') OR d.`description` LIKE CONCAT('%', #{keyword}, '%'))
                        </if>
                        <if test="keywordExpression == 'equal'">
                            and (d.`name` = #{keyword} OR d.`description` = #{keyword})
                        </if>
                    </when>
                </choose>
            </if>
            <if test="filterList != null and filterList.size() > 0">
                AND
                <foreach collection="filterList" item="filter" separator="AND">
                    <choose>
                        <when test="filter.expression == 'equal'">
                            <choose>
                                <when test="filter.valueList.size() > 1">
                                    a.`${filter.uuid}` IN
                                    <foreach collection="filter.valueList" item="item" open="(" close=")" separator=",">
                                        #{item}
                                    </foreach>
                                </when>
                                <otherwise>
                                    a.`${filter.uuid}` = #{filter.valueList[0]}
                                </otherwise>
                            </choose>
                        </when>
                        <when test="filter.expression == 'notequal'">
                            <choose>
                                <when test="filter.valueList.size() > 1">
                                    (a.`${filter.uuid}` NOT IN
                                    <foreach collection="filter.valueList" item="item" open="(" close=")" separator=",">
                                        #{item}
                                    </foreach>
                                    OR a.`${filter.uuid}` IS NULL)
                                </when>
                                <otherwise>
                                    a.`${filter.uuid}` != #{filter.valueList[0]}
                                </otherwise>
                            </choose>
                        </when>
                        <when test="filter.expression == 'like'">
                            <choose>
                                <when test="filter.type == 'select' or filter.type == 'user' or filter.type == 'team' or filter.type == 'role' or filter.valueList.size() > 1">
                                    a.`${filter.uuid}` IN
                                    <foreach collection="filter.valueList" item="item" open="(" close=")" separator=",">
                                        #{item}
                                    </foreach>
                                </when>
                                <otherwise>
                                    a.`${filter.uuid}` LIKE CONCAT('%', #{filter.valueList[0]}, '%')
                                </otherwise>
                            </choose>
                        </when>
                        <when test="filter.expression == 'notlike'">
                            <choose>
                                <when test="filter.type == 'select' or filter.type == 'user' or filter.type == 'team' or filter.type == 'role' or filter.valueList.size() > 1">
                                    (a.`${filter.uuid}` NOT IN
                                    <foreach collection="filter.valueList" item="item" open="(" close=")" separator=",">
                                        #{item}
                                    </foreach>
                                    OR a.`${filter.uuid}` IS NULL)
                                </when>
                                <otherwise>
                                    (a.`${filter.uuid}` NOT LIKE CONCAT('%', #{filter.valueList[0]}, '%') OR a.`${filter.uuid}` IS NULL)
                                </otherwise>
                            </choose>
                        </when>
                        <when test="filter.expression == 'is-null'">
                            a.`${filter.uuid}` IS NULL
                        </when>
                        <when test="filter.expression == 'is-not-null'">
                            a.`${filter.uuid}` IS NOT NULL
                        </when>
                        <when test="filter.expression == 'between'">
                            a.`${filter.uuid}` BETWEEN #{filter.valueList[0]} AND #{filter.valueList[1]}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="filter.valueList.size() > 1">
                                    a.`${filter.uuid}` IN
                                    <foreach collection="filter.valueList" item="item" open="(" close=")" separator=",">
                                        #{item}
                                    </foreach>
                                </when>
                                <otherwise>
                                    a.`${filter.uuid}` = #{filter.valueList[0]}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </foreach>
            </if>
        </where>
    </sql>

    <select id="getDynamicTableDataCountForSelect" parameterType="neatlogic.framework.matrix.dto.MatrixDataVo"
            resultType="int">
        SELECT
        COUNT(1)
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}` a
        <include refid="searchDynamicTableDataForSelectSql"/>
    </select>

    <select id="getDynamicTableDataForSelect" parameterType="neatlogic.framework.matrix.dto.MatrixDataVo"
            resultType="java.util.LinkedHashMap">
        SELECT
        <foreach collection="columnList" item="column" separator=",">
            a.`${column}`
        </foreach>
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}` a
        <include refid="searchDynamicTableDataForSelectSql"/>
        ORDER BY a.`sort` DESC
        <if test="needPage == true">
            LIMIT #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="getDynamicTableDataListCount" parameterType="neatlogic.framework.matrix.dto.MatrixDataVo"
            resultType="int">
        SELECT
        <choose>
            <when test="isDistinct != null and isDistinct">
                COUNT(DISTINCT
                <foreach collection="columnList" item="column" open=" " separator=",">
                    a.`${column}`
                </foreach>
                )
            </when>
            <otherwise>
                COUNT(1)
            </otherwise>
        </choose>
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}` a
        <include refid="searchDynamicTableDataListSql"/>
    </select>

    <select id="getDynamicTableDataList" parameterType="neatlogic.framework.matrix.dto.MatrixDataVo"
            resultType="java.util.LinkedHashMap">
        SELECT
        <choose>
            <when test="isDistinct != null and isDistinct">
                DISTINCT
                <foreach collection="columnList" item="column" open=" " separator=",">
                    a.`${column}`
                </foreach>
            </when>
            <otherwise>
                a.`uuid`,
                <foreach collection="columnList" item="column" separator=",">
                    a.`${column}`
                </foreach>
            </otherwise>
        </choose>
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}` a
        <include refid="searchDynamicTableDataListSql"/>
        <if test="isDistinct == null or !isDistinct">
        ORDER BY a.`sort` DESC
        </if>
        <if test="needPage == true">
            LIMIT #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="checkMatrixAttributeHasDataByAttributeUuidList" resultType="java.util.LinkedHashMap">
        SELECT
        <foreach collection="attributeUuidList" item="attributeUuid" separator=",">
            COUNT(`${attributeUuid}`) AS `${attributeUuid}`
        </foreach>
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
    </select>

    <select id="getMaxSort" resultType="java.lang.Integer">
        SELECT `sort`
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        ORDER BY `sort` DESC
        LIMIT 1
    </select>

    <select id="getSortByUuid" resultType="java.lang.Integer">
        SELECT `sort`
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        where `uuid` = #{uuid}
    </select>

    <insert id="insertDynamicTableData">
        INSERT INTO `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        <foreach collection="rowData" open="(" close=")" item="columnData" separator=",">
            `${columnData.column}`
        </foreach>
        VALUES
        <foreach collection="rowData" open="(" close=")" item="columnData" separator=",">
            #{columnData.value}
        </foreach>
    </insert>

    <insert id="insertDynamicTableDataForCopy">
        INSERT INTO `@{DATA_SCHEMA}`.`matrix_${targetMatrixUuid}`
        (`uuid`,
        <foreach collection="targetColumnList" item="targetColumn" separator=",">
            `${targetColumn}`
        </foreach>
        )
        SELECT
        MD5(UUID()),
        <foreach collection="sourceColumnList" item="sourceColumn" separator=",">
            `${sourceColumn}`
        </foreach>
        FROM `@{DATA_SCHEMA}`.`matrix_${sourceMatrixUuid}`
        ORDER BY `sort`
    </insert>

    <update id="updateDynamicTableDataByUuid">
        UPDATE `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        SET
        <foreach collection="rowData" item="columnData" separator=",">
            `${columnData.column}` = #{columnData.value}
        </foreach>
        WHERE `uuid` = #{uuid}
    </update>

    <update id="updateSortByUuid">
        UPDATE `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        SET `sort` = #{sort}
        WHERE `uuid` = #{uuid}
    </update>

    <update id="updateSortIncrement">
        UPDATE `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        SET `sort` = `sort` + 1
        WHERE `sort` &gt;= #{fromSort}
          and `sort` &lt;= #{toSort}
    </update>

    <update id="updateSortDecrement">
        UPDATE `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        SET `sort` = `sort` - 1
        WHERE `sort` &gt;= #{fromSort}
          and `sort` &lt;= #{toSort}
    </update>

    <update id="batchUpdateSortequalsId">
        UPDATE `@{DATA_SCHEMA}`.`matrix_${matrixUuid}` SET `sort` = `id`
    </update>

    <delete id="deleteDynamicTableDataByUuid">
        DELETE
        FROM `@{DATA_SCHEMA}`.`matrix_${matrixUuid}`
        WHERE `uuid` = #{uuid}
    </delete>
</mapper>
