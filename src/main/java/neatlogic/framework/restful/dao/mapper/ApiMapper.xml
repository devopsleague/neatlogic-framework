<?xml version="1.0" encoding="UTF-8" ?>
<!--Copyright (C) $today.year  深圳极向量科技有限公司 All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.framework.restful.dao.mapper.ApiMapper">
    <cache type="neatlogic.framework.dao.cache.NeatLogicCache" flushInterval="30000" size="100"></cache>

    <select id="getApiByToken" parameterType="java.lang.String" resultType="neatlogic.framework.restful.dto.ApiVo"
            useCache="true">
        SELECT `name`,
               `module_id`  AS moduleId,
               `handler`,
               `username`,
               `password`   as passwordCipher,
               `config`,
               `is_active`  AS isActive,
               `token`,
               `expire`,
               `description`,
               `authtype`,
               `type`,
               `qps`,
               `timeout`,
               `need_audit` AS needAudit
        FROM `api`
        WHERE token = #{value}
    </select>

    <select id="getApiTokenList" parameterType="neatlogic.framework.restful.dto.ApiVo" resultType="java.lang.String"
            useCache="false">
        SELECT
        `token`
        FROM `api`
        WHERE 1=1
        <if test="moduleId != null">
            AND `module_id` = #{moduleId}
        </if>
        <if test="handler != null">
            AND `handler` = #{handler}
        </if>
        <if test="isActive != null">
            AND `is_active` = #{isActive}
        </if>
        <if test="keyword != null and keyword != ''">
            AND (`name` LIKE CONCAT('%', #{keyword}, '%') OR `token` LIKE CONCAT('%', #{keyword}, '%'))
        </if>
    </select>

    <select id="getApiListByTokenList" parameterType="java.lang.String"
            resultType="neatlogic.framework.restful.dto.ApiVo" useCache="false">
        SELECT
        `name`,
        `module_id` AS moduleId,
        `handler`,
        `username`,
        `password`,
        `config`,
        `is_active` AS isActive,
        `token`,
        `expire`,
        `description`,
        `authtype`,
        `type`,
        `qps`,
        `timeout`,
        `need_audit` AS needAudit
        FROM `api`
        WHERE `token` IN
        <foreach collection="list" item="token" separator="," open="(" close=")">
            #{token}
        </foreach>
    </select>

    <select id="getAllApi" resultType="neatlogic.framework.restful.dto.ApiVo" useCache="true">
        SELECT `name`,
               `module_id`  AS moduleId,
               `handler`,
               `username`,
               `password`,
               `config`,
               `is_active`  AS isActive,
               `token`,
               `expire`,
               `description`,
               `authtype`,
               `type`,
               `qps`,
               `timeout`,
               `need_audit` AS needAudit
        FROM `api`
        order by `create_time` desc
    </select>

    <select id="getAllApiByModuleId" resultType="neatlogic.framework.restful.dto.ApiVo" useCache="true">
        SELECT `name`,
        `module_id` AS moduleId,
        `handler`,
        `username`,
        `password`,
        `config`,
        `is_active` AS isActive,
        `token`,
        `expire`,
        `description`,
        `authtype`,
        `type`,
        `qps`,
        `timeout`,
        `need_audit` AS needAudit
        FROM `api`
        <where>
            <if test="moduleIdList != null and moduleIdList.size() > 0">
                and module_id in
                <foreach collection="moduleIdList" item="item" open="(" close=")" separator=",">#{item}</foreach>
            </if>
        </where>
        order by `create_time` desc
    </select>

    <update id="batchUpdate" parameterType="neatlogic.framework.restful.dto.ApiVo">
        UPDATE `api`
        SET
        <if test="isActive != null">
            `is_active` = #{isActive},
        </if>
        <if test="expire != null">
            `expire` = #{expire},
        </if>
        <if test="timeout != null">
            `timeout` = #{timeout},
        </if>
        `token` = `token`
        WHERE `token` IN
        <foreach collection="tokenList" item="token" separator="," open="(" close=")">
            #{token}
        </foreach>

    </update>
    <update id="updatePasswordByToken">
        update api
        set password = #{password}
        where token = #{token}
    </update>

    <insert id="replaceApi" parameterType="neatlogic.framework.restful.dto.ApiVo">
        INSERT INTO `api`
        (`name`,
         `module_id`,
         `is_active`,
         `handler`,
         `config`,
         `token`,
         `description`,
         `expire`,
         `username`,
         `password`,
         `authtype`,
         `type`,
         `qps`,
         `timeout`,
         `need_audit`,
         `create_time`)
        VALUES (#{name},
                #{moduleId},
                #{isActive},
                #{handler},
                #{config},
                #{token},
                #{description},
                #{expire},
                #{username},
                #{passwordCipher},
                #{authtype},
                #{type},
                #{qps},
                #{timeout},
                #{needAudit},
                now(3))
        ON DUPLICATE KEY UPDATE `type`        = #{type},
                                `handler`     = #{handler},
                                `name`        = #{name},
                                `description` = #{description},
                                `module_id`   = #{moduleId},
                                `is_active`   = #{isActive},
                                `username`    = #{username},
                                `password`    = #{password},
                                `authtype`    = #{authtype},
                                `qps`         = #{qps},
                                `timeout`     = #{timeout},
                                `need_audit`  = #{needAudit}
    </insert>

    <insert id="insertApi" parameterType="neatlogic.framework.restful.dto.ApiVo">
        INSERT IGNORE INTO `api`
        (`name`,
         `module_id`,
         `is_active`,
         `handler`,
         `config`,
         `token`,
         `description`,
         `expire`,
         `username`,
         `password`,
         `authtype`,
         `type`,
         `qps`,
         `timeout`,
         `need_audit`,
         `create_time`)
        VALUES (#{name},
                #{moduleId},
                #{isActive},
                #{handler},
                #{config},
                #{token},
                #{description},
                #{expire},
                #{username},
                #{passwordCipher},
                #{authtype},
                #{type},
                #{qps},
                #{timeout},
                #{needAudit},
                now(3))
    </insert>

    <insert id="insertOrUpdateNeedAuditApi" parameterType="neatlogic.framework.restful.dto.ApiVo">
        INSERT INTO `api`
        (`name`,
         `module_id`,
         `is_active`,
         `handler`,
         `config`,
         `token`,
         `description`,
         `expire`,
         `username`,
         `password`,
         `authtype`,
         `type`,
         `qps`,
         `timeout`,
         `need_audit`,
         `create_time`)
        VALUES (#{name},
                #{moduleId},
                #{isActive},
                #{handler},
                #{config},
                #{token},
                #{description},
                #{expire},
                #{username},
                #{passwordCipher},
                #{authtype},
                #{type},
                #{qps},
                #{timeout},
                #{needAudit},
                now(3))
        ON DUPLICATE KEY UPDATE `need_audit`  = #{needAudit}
    </insert>

    <delete id="deleteApiByToken" parameterType="java.lang.String">
        DELETE
        FROM `api`
        WHERE `token` = #{token}
    </delete>
</mapper>
