<?xml version="1.0" encoding="UTF-8" ?>
<!--Copyright (C) $today.year  深圳极向量科技有限公司 All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.framework.dao.mapper.UserSessionMapper">
    <cache type="neatlogic.framework.dao.cache.NeatLogicCache" flushInterval="30000" size="100"/>

    <select id="getUserSessionByTokenHash" parameterType="java.lang.String"
            resultType="neatlogic.framework.dto.UserSessionVo" useCache="false">
        SELECT `user_uuid`         as userUuid,
               `visit_time`        as sessionTime,
               `auth_info`         as authInfoStr,
               `token_create_time` as tokenCreateTime
        FROM `user_session`
        WHERE `token_hash` = #{value}
    </select>

    <select id="getOnlineUserUuidListByUserUuidListAndTeamUuidListAndRoleUuidListAndGreaterThanSessionTimeCount"
            resultType="int">
        select
        count(1)
        from
        (
        <if test="userUuidList != null and userUuidList.size() > 0">
            SELECT
            a.`uuid`
            FROM `user` a
            JOIN `user_session` b ON b.`user_uuid` = a.`uuid` AND b.`visit_time` &gt; #{sessionTime}
            WHERE `uuid` IN
            <foreach collection="userUuidList" item="userUuid" open="(" separator="," close=")">
                #{userUuid}
            </foreach>
        </if>
        <if test="roleUuidList != null and roleUuidList.size() > 0">
            <if test="userUuidList != null and userUuidList.size() > 0">
                UNION
            </if>
            SELECT
            a.`user_uuid`
            FROM `user_role` a
            JOIN `user_session` b ON b.`user_uuid` = a.`user_uuid` AND b.`visit_time` &gt; #{sessionTime}
            WHERE `role_uuid` IN
            <foreach collection="roleUuidList" item="roleUuid" open="(" separator="," close=")">
                #{roleUuid}
            </foreach>
        </if>
        <if test="teamUuidList != null and teamUuidList.size() > 0">
            <if test="(roleUuidList != null and roleUuidList.size() > 0) || (userUuidList != null and userUuidList.size() > 0)">
                UNION
            </if>
            SELECT
            a.`user_uuid`
            FROM `user_team` a
            JOIN `user_session` b ON b.`user_uuid` = a.`user_uuid` AND b.`visit_time` &gt; #{sessionTime}
            WHERE `team_uuid` IN
            <foreach collection="teamUuidList" item="teamUuid" open="(" separator="," close=")">
                #{teamUuid}
            </foreach>
        </if>
        ) a
    </select>

    <select id="getOnlineUserUuidListByUserUuidListAndTeamUuidListAndRoleUuidListAndGreaterThanSessionTime"
            resultType="java.lang.String">
        select
        `uuid`
        from
        (
        <if test="userUuidList != null and userUuidList.size() > 0">
            SELECT
            a.`uuid` as `uuid`
            FROM `user` a
            JOIN `user_session` b ON b.`user_uuid` = a.`uuid` AND b.`visit_time` &gt; #{sessionTime}
            WHERE `uuid` IN
            <foreach collection="userUuidList" item="userUuid" open="(" separator="," close=")">
                #{userUuid}
            </foreach>
        </if>
        <if test="roleUuidList != null and roleUuidList.size() > 0">
            <if test="userUuidList != null and userUuidList.size() > 0">
                UNION
            </if>
            SELECT
            a.`user_uuid` as `uuid`
            FROM `user_role` a
            JOIN `user_session` b ON b.`user_uuid` = a.`user_uuid` AND b.`visit_time` &gt; #{sessionTime}
            WHERE `role_uuid` IN
            <foreach collection="roleUuidList" item="roleUuid" open="(" separator="," close=")">
                #{roleUuid}
            </foreach>
        </if>
        <if test="teamUuidList != null and teamUuidList.size() > 0">
            <if test="(roleUuidList != null and roleUuidList.size() > 0) || (userUuidList != null and userUuidList.size() > 0)">
                UNION
            </if>
            SELECT
            a.`user_uuid` as `uuid`
            FROM `user_team` a
            JOIN `user_session` b ON b.`user_uuid` = a.`user_uuid` AND b.`visit_time` &gt; #{sessionTime}
            WHERE `team_uuid` IN
            <foreach collection="teamUuidList" item="teamUuid" open="(" separator="," close=")">
                #{teamUuid}
            </foreach>
        </if>
        ) a
        <if test="needPage">
            limit #{startNum},#{pageSize}
        </if>
    </select>

    <select id="getAllOnlineUserCount" parameterType="java.util.Date" resultType="int">
        SELECT count(1)
        FROM `user` a
                 JOIN `user_session` b ON b.`user_uuid` = a.`uuid` AND b.`visit_time` &gt; #{value}
    </select>

    <select id="getAllOnlineUser" resultType="java.lang.String">
        SELECT a.`uuid`
        FROM `user` a
                 JOIN `user_session` b ON b.`user_uuid` = a.`uuid` AND b.`visit_time` &gt; #{sessionTime}
        limit #{startNum},#{pageSize}
    </select>
    <select id="getUserSessionCountByDate" resultType="java.lang.Integer">
        SELECT count(1)
        FROM `user_session` b
        where b.`visit_time` &gt;= #{value}
    </select>
    <select id="getUserSessionByUuid" resultType="neatlogic.framework.dto.UserSessionVo">
        SELECT `user_uuid`         as userUuid,
               `visit_time`        as sessionTime,
               `auth_info`         as authInfoStr,
               `token_create_time` as tokenCreateTime,
               `token_hash`        as tokenHash
        FROM `user_session`
        WHERE `user_uuid` = #{value}
    </select>

    <insert id="insertUserSession">
        INSERT INTO `user_session` (`user_uuid`, `visit_time`, `token_hash`, `token_create_time`, `auth_info`)
        VALUES (#{userUuid}, NOW(3), #{tokenHash}, #{tokenCreateTime}, #{authInfo})
        ON DUPLICATE KEY
            UPDATE `visit_time`        = NOW(3),
                   `auth_info`         = #{authInfo},
                   `token_create_time` = #{tokenCreateTime}
    </insert>

    <insert id="insertUserSessionWithoutTokenCreateTime">
        INSERT INTO `user_session` (`user_uuid`, `visit_time`, `token_hash`, `token_create_time`, `auth_info`)
        VALUES (#{userUuid}, NOW(3), #{tokenHash}, #{tokenCreateTime}, #{authInfo})
        ON DUPLICATE KEY
            UPDATE `visit_time` = NOW(3)
    </insert>

    <update id="updateUserSession" parameterType="java.lang.String">
        UPDATE `user_session`
        set `visit_time` = now(3)
        WHERE `token_hash` = #{value}
    </update>

    <delete id="deleteUserSessionByTokenHash" parameterType="java.lang.String">
        DELETE
        FROM `user_session`
        where `token_hash` = #{value}
    </delete>

    <delete id="deleteUserSessionByUserUuid" parameterType="java.lang.String">
        DELETE
        FROM `user_session`
        where `user_uuid` = #{value}
    </delete>
    <delete id="deleteUserSessionByExpireTime" parameterType="java.lang.Long">
        DELETE
        FROM `user_session`
        where UNIX_TIMESTAMP(`visit_time`)*1000 &lt; #{value}
    </delete>

</mapper>

