<?xml version="1.0" encoding="UTF-8" ?>
<!--
Copyright(c) 2023 NeatLogic Co., Ltd. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.framework.dao.mapper.runner.RunnerMapper">
    <cache type="neatlogic.framework.dao.cache.NeatLogicCache" flushInterval="30000" size="100"/>

    <select id="getAllNetworkMask" resultType="neatlogic.framework.dto.runner.GroupNetworkVo" useCache="false">
        SELECT `id`,
               `group_id`   as groupId,
               `network_ip` as networkIp,
               `mask`
        FROM `runnergroup_network`
    </select>

    <resultMap id="runnerGroupMap" type="neatlogic.framework.dto.runner.RunnerGroupVo">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="description" property="description"/>
        <collection property="groupNetworkList" ofType="neatlogic.framework.dto.runner.GroupNetworkVo">
            <id column="networkId" property="id"/>
            <result column="groupId" property="groupId"/>
            <result column="networkIp" property="networkIp"/>
            <result column="mask" property="mask"/>
        </collection>
        <collection property="runnerIdList" ofType="java.lang.Long">
            <id column="runnerId"/>
        </collection>
    </resultMap>

    <resultMap id="runnerMapGroupMap" type="neatlogic.framework.dto.runner.RunnerGroupVo">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <collection property="networkList" ofType="neatlogic.framework.dto.runner.GroupNetworkVo">
            <id column="networkId" property="id"/>
            <result column="groupId" property="groupId"/>
            <result column="networkIp" property="networkIp"/>
            <result column="mask" property="mask"/>
        </collection>
        <collection property="runnerMapList" ofType="neatlogic.framework.dto.runner.RunnerMapVo">
            <id column="runnerId" property="id"/>
            <result column="runnerName" property="name"/>
            <result column="runnerMapId" property="runnerMapId"/>
            <result column="url" property="url"/>
            <result column="accessKey" property="accessKey"/>
            <result column="accessSecret" property="accessSecret"/>
            <result column="authMode" property="authType"/>
        </collection>
    </resultMap>

    <resultMap id="runnerMap" type="neatlogic.framework.dto.runner.RunnerVo">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="url" property="url"/>
        <result column="nettyPort" property="nettyPort"/>
        <result column="host" property="host"/>
        <result column="port" property="port"/>
        <result column="isDelete" property="isDelete"/>
        <collection property="runnerGroupVoList" ofType="neatlogic.framework.dto.runner.RunnerGroupVo">
            <id column="groupId" property="id"/>
            <result column="groupName" property="name"/>
        </collection>
        <collection property="runnerAuthList" ofType="neatlogic.framework.dto.runner.RunnerAuthVo">
            <result column="authType" property="authType"/>
            <result column="accessKey" property="accessKey"/>
            <result column="accessSecret" property="accessSecret"/>
        </collection>
    </resultMap>

    <resultMap id="runnerMapMap" type="neatlogic.framework.dto.runner.RunnerMapVo">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="url" property="url"/>
        <result column="host" property="host"/>
        <result column="port" property="port"/>
        <result column="accessKey" property="accessKey"/>
        <result column="accessSecret" property="accessSecret"/>
        <result column="authType" property="authType"/>
        <result column="runnerMapId" property="runnerMapId"/>
        <result column="publicKey" property="publicKey"/>
        <result column="privateKey" property="privateKey"/>
        <collection property="runnerGroupVoList" ofType="neatlogic.framework.dto.runner.RunnerGroupVo">
            <result column="groupId" property="id"/>
        </collection>
    </resultMap>

    <select id="getRunnerMapGroupById" resultMap="runnerMapGroupMap" useCache="false">
        SELECT a.id              id,
               a.name            name,
               c.id           AS runnerId,
               d.`id`         AS runnerMapId,
               c.`auth_type`  AS authType,
               c.`access_key` AS accessKey,
               c.`access_secret`
                              AS accessSecret,
               c.`url`        AS url,
               c.`name`       AS runnerName,
               b.`id`            networkId,
               b.`group_id`      groupId,
               b.`network_ip`    networkIp,
               b.`mask`          mask
        FROM `runnergroup` a
                 LEFT JOIN `runnergroup_network` b ON a.`id` = b.`group_id`
                 LEFT JOIN `runnergroup_runner` e ON e.`runnergroup_id` = a.`id`
                 LEFT JOIN `runner` c ON c.`id` = e.`runner_id`
                 LEFT JOIN `runner_map` d ON c.`id` = d.`runner_id`
        WHERE a.`id` = #{id}
          and c.is_delete = 0
    </select>

    <select id="getAllRunnerMap" resultMap="runnerMapMap" useCache="false">
        SELECT ar.`id`,
               ar.`name`,
               ar.`url`,
               ar.`host`,
               ar.`port`,
               ar.`access_key`                         AS accessKey,
               ar.`access_secret`                      AS accessSecret,
               ar.`auth_type`                          AS authType,
               ar.`public_key`                         AS publicKey,
               ar.`private_key`                        AS privateKey,
               rgr.`runnergroup_id`                    AS groupId,
               IF(arm.`id` IS NULL, ar.`id`, arm.`id`) AS runnerMapId
        FROM `runner` ar
                 LEFT JOIN `runner_map` arm ON ar.`id` = arm.`runner_id`
                 LEFT JOIN `runnergroup_runner` rgr ON ar.`id` = rgr.`runner_id`
        where ar.is_delete = 0;
    </select>

    <select id="getRunnerById" resultMap="runnerMap" useCache="false">
        SELECT `id`,
               `name`,
               `url`,
               `host`,
               `port`,
               `access_key`         as accessKey,
               `access_secret`      as accessSecret,
               `auth_type`          as authType,
               `public_key`         as publicKey,
               `private_key`        as privateKey,
               rgr.`runnergroup_id` as groupId
        FROM `runner` r
                 LEFT JOIN runnergroup_runner rgr on r.id = rgr.runner_id
        WHERE `id` = #{value}
    </select>

    <select id="checkGroupNameIsRepeats" resultType="int"
            parameterType="neatlogic.framework.dto.runner.RunnerGroupVo" useCache="false">
        select COUNT(1)
        from runnergroup
        where `id` != #{id}
          and `name` = #{name}
    </select>

    <select id="searchRunnerGroupCount" resultType="int" parameterType="neatlogic.framework.dto.runner.RunnerGroupVo"
            useCache="false">
        select count(rg.id)
        from runnergroup rg
        LEFT JOIN runnergroup_runner rgr ON rg.`id` = rgr.`runnergroup_id`
        LEFT JOIN runner r ON r.`id` = rgr.`runner_id`
        LEFT JOIN runnergroup_network c ON rg.`id` = c.`group_id`
        <include refid="searchRunnerGroup"></include>
    </select>

    <select id="searchRunnerGroup" parameterType="neatlogic.framework.dto.runner.RunnerGroupVo"
            resultMap="runnerGroupMap" useCache="false">
        SELECT
        g.`id` as id,
        g.`name` as name,
        g.`description`,
        nk.`id` as networkId,
        nk.`group_id` as groupId,
        nk.`network_ip` as networkIp,
        nk.`mask` as mask,
        r.`id` as runnerId
        FROM
        (SELECT DISTINCT
        rg.`id`,
        rg.`name`,
        rg.`description`
        FROM
        runnergroup rg
        LEFT JOIN runnergroup_runner rgr ON rgr.`runnergroup_id` = rg.`id`
        LEFT JOIN runner r ON rgr.`runner_id` = r.`id`
        LEFT JOIN runnergroup_network c ON rg.`id` = c.`group_id`
        <include refid="searchRunnerGroup"></include>
        ORDER BY rg.`id` DESC
        <if test="needPage == true">
            LIMIT #{startNum},#{pageSize}
        </if>
        ) g
        LEFT JOIN runnergroup_network nk ON g.`id` = nk.`group_id`
        LEFT JOIN runnergroup_runner rgr ON rgr.`runnergroup_id` = g.`id`
        LEFT JOIN runner r ON r.`id` = rgr.`runner_id`
        ORDER BY g.`id` DESC, nk.`id` DESC

    </select>

    <select id="checkRunnerGroupIdIsExist" resultType="int" useCache="false">
        select count(`id`)
        from runnergroup
        where `id` = #{id}
    </select>
    <select id="checkRunnerNameIsExist" resultType="int" parameterType="neatlogic.framework.dto.runner.RunnerVo"
            useCache="false">
        select count(1)
        from runner
        where `id` != #{id}
          and `name` = #{name};
    </select>

    <select id="checkRunnerIdIsExist" resultType="int" useCache="false">
        select count(1)
        from runner
        where `id` = #{id}
    </select>

    <select id="getRunnerByIp" parameterType="java.lang.String" resultMap="runnerMap"
            useCache="false">
        SELECT p.`id`               AS id,
               p.`name`             AS name,
               p.`url`              AS url,
               p.`access_key`       AS accessKey,
               p.`access_secret`    AS accessSecret,
               p.`auth_type`        AS authType,
               rgr.`runnergroup_id` AS groupId,
               p.is_delete          AS isDelete,
               p.`host`,
               p.`port`
        FROM runner p
                 LEFT JOIN runnergroup_runner rgr on p.id = rgr.runner_id
        WHERE p.host = #{value}
    </select>

    <select id="getRunnerListByGroupId" parameterType="java.lang.Long"
            resultMap="runnerMap" useCache="true">
        SELECT r.`id`               AS id,
               r.`name`             AS name,
               r.`url`              AS url,
               r.`access_key`       AS accessKey,
               r.`access_secret`    AS accessSecret,
               r.`auth_type`        AS authType,
               rgr.`runnergroup_id` AS groupId,
               r.`netty_ip`         as nettyIp,
               r.`netty_port`       as nettyPort,
               r.`host`,
               r.`port`
        FROM runner r
                 LEFT JOIN runnergroup_runner rgr on r.`id` = rgr.`runner_id`
        WHERE rgr.`runnergroup_id` = #{value}
        ORDER BY id
    </select>

    <select id="getRunnerByNettyIpAndNettyPort" resultMap="runnerMap" useCache="false">
        SELECT r.`id`,
        r.`name`,
        r.`url`,
        r.`host`,
        r.`port`,
        r.`access_key` as accessKey,
        r.`access_secret` as accessSecret,
        r.`auth_type` as authType,
        r.`public_key` as publicKey,
        r.`private_key` as privateKey,
        rgr.`runnergroup_id` as groupId
        FROM `runner` r
        LEFT JOIN runnergroup_runner rgr on r.`id` = rgr.`runner_id`
        WHERE r.`netty_ip` = #{nettyIp}
        <if test="nettyPort == null">
            and r.`netty_port` is null
        </if>
        <if test="nettyPort != null">
            and r.`netty_port` = #{nettyPort}
        </if>

    </select>

    <select id="searchRunner" parameterType="neatlogic.framework.dto.runner.RunnerVo"
            resultMap="runnerMap" useCache="false">
        SELECT
        g.id AS id,
        g.name AS name,
        g.url AS url,
        g.netty_port AS nettyPort,
        g.access_key AS accessKey,
        g.access_secret AS accessSecret,
        g.auth_type AS authType,
        rgr.runnergroup_id AS groupId,
        rg.name AS groupName,
        g.host,
        g.port,
        g.is_delete AS isDelete
        from
        (SELECT DISTINCT
        r.id,
        r.name,
        r.url,
        r.netty_port,
        r.access_key,
        r.access_secret,
        r.auth_type,
        r.host,
        r.port,
        r.is_delete
        from runner r
        LEFT JOIN runnergroup_runner rgr on r.`id` = rgr.`runner_id`
        LEFT JOIN runnergroup rg on rg.`id` = rgr.`runnergroup_id`
        <include refid="searchRunner"></include>
        ORDER BY id DESC
        <if test="needPage == true">
            LIMIT #{startNum},#{pageSize}
        </if>)g
        LEFT JOIN runnergroup_runner rgr on g.`id` = rgr.`runner_id`
        LEFT JOIN runnergroup rg on rg.`id` = rgr.`runnergroup_id`
    </select>

    <sql id="searchRunnerGroup">
        <where>
            <if test="keyword != null and keyword != ''">
                AND (
                rg.`name` LIKE CONCAT('%', #{keyword}, '%')
                OR r.`name` LIKE CONCAT('%', #{keyword}, '%')
                OR c.`network_ip` LIKE CONCAT('%', #{keyword}, '%')
                OR r.`url` LIKE CONCAT('%', #{keyword}, '%')
                )
            </if>
            <if test="authType != null and authType != ''">
                AND r.`auth_type` = #{authType}
            </if>
        </where>
    </sql>
    <sql id="searchRunner">
        <where>
            <if test="groupId != null and isFilterGroup == 0">
                AND rgr.`runnergroup_id` =#{groupId}
            </if>
            <if test="groupId != null and isFilterGroup == 1">
                AND NOT EXISTS ( SELECT 1 FROM runner a LEFT JOIN runnergroup_runner b ON a.`id` = b.`runner_id` WHERE
                a.id = r.id and b.runnergroup_id =#{groupId})
            </if>
            <if test="keyword != null and keyword != ''">
                AND ( r.`name` LIKE CONCAT('%', #{keyword}, '%')
                OR r.`host` LIKE CONCAT('%', #{keyword}, '%'))
            </if>
            <if test="isDelete != null">
                AND r.`is_delete` = #{isDelete}
            </if>
        </where>
    </sql>

    <select id="searchRunnerCountByGroupId" resultType="int" useCache="false">
        select count(`id`)
        from runner r
                 LEFT JOIN runnergroup_runner rgr on r.`id` = rgr.`runner_id`
        where rgr.`runnergroup_id` = #{id}
    </select>

    <select id="searchRunnerCount" resultType="java.lang.Integer">
        select count(distinct `id`)
        from runner r
        LEFT JOIN runnergroup_runner rgr on r.`id` = rgr.`runner_id`
        <include refid="searchRunner"></include>
    </select>

    <update id="updateRunnerGroup" parameterType="neatlogic.framework.dto.runner.RunnerGroupVo">
        update runnergroup
        set `name`=#{name},
            `description` =#{description}
        where `id` = #{id}
    </update>

    <insert id="insertRunnerGroup" parameterType="neatlogic.framework.dto.runner.RunnerGroupVo">
        insert runnergroup(`id`, `name`, `description`)
        VALUES (#{id},
                #{name},
                #{description})
    </insert>

    <delete id="deleteGroupNetWork">
        delete
        from runnergroup_network
        where `group_id` = #{id}
    </delete>

    <insert id="insertRunnerMap">
        INSERT IGNORE INTO `runner_map` (`id`, `runner_id`)
        VALUES (#{runnerMapId}, #{id});
    </insert>

    <insert id="insertNetwork" parameterType="neatlogic.framework.dto.runner.GroupNetworkVo">
        INSERT INTO runnergroup_network(id, group_id, network_ip, mask)
        VALUES (#{id},
                #{groupId},
                #{networkIp},
                #{mask})
    </insert>


    <delete id="deleteRunnerGroupById">
        delete
        from runnergroup
        where `id` = #{id}
    </delete>

    <update id="updateRunner" parameterType="neatlogic.framework.dto.runner.RunnerVo">
        UPDATE runner
        SET `name` = #{name},
        `host`=#{host},
        `port`=#{port},
        `url` = #{url},
        `access_key` = #{accessKey},
        `access_secret` = #{accessSecret},
        <if test="host != null and host !='' ">
            `netty_ip` = #{host},
        </if>
        <if test="nettyPort != null and nettyPort !='' ">
            `netty_port` = #{nettyPort},
        </if>
        <if test="accessKey != null and accessKey !='' ">
            `public_key` = #{publicKey},
        </if>
        <if test="privateKey != null and privateKey !='' ">
            `private_key` = #{privateKey},
        </if>
        <if test="isDelete != null">
            `is_delete` = #{isDelete},
        </if>
        `auth_type` = #{authType}
        WHERE `id` = #{id}
    </update>

    <select id="checkRunnerIsUsedByJob" resultType="int">
        select count(1)
        from runner_map rm
        where rm.`runner_id` = #{id}
    </select>

    <select id="checkRunnerIsUsedByRunnerGroup" resultType="int">
        select count(1)
        from runnergroup_runner rgr
        where rgr.runner_id = #{id}
    </select>

    <select id="checkRunnerIsExistByIdAndIp" resultType="int">
        select count(1)
        from runner
        where host = #{host}
        <if test="id != null">
            and id != #{id}
        </if>
    </select>

    <select id="getRunnerByName" parameterType="java.lang.String" resultMap="runnerMap"
            useCache="false">
        SELECT p.`id`               AS id,
               p.`name`             AS name,
               p.`url`              AS url,
               p.`access_key`       AS accessKey,
               p.`access_secret`    AS accessSecret,
               p.`auth_type`        AS authType,
               p.is_delete          AS isDelete,
               rgr.`runnergroup_id` AS groupId,
               p.`host`,
               p.`port`
        FROM runner p
                 LEFT JOIN runnergroup_runner rgr on p.id = rgr.runner_id
        WHERE p.`name` = #{name}
    </select>

    <select id="getRunnerByRunnerMapIdList" resultType="neatlogic.framework.dto.runner.RunnerMapVo">
        SELECT p.`id` AS id,
        p.`name` AS name,
        p.`url` AS url,
        p.`access_key` AS accessKey,
        p.`access_secret` AS accessSecret,
        p.`auth_type` AS authType,
        p.is_delete AS isDelete,
        p.`host`,
        rm.id as runnerMapId,
        p.`port`
        FROM runner p left join runner_map rm on p.id = rm.runner_id
        where rm.id in
        <foreach collection="list" item="runnerMapId" close=")" open="(" separator=",">
            #{runnerMapId}
        </foreach>
    </select>

    <select id="getRunnerMapByRunnerMapId" resultType="neatlogic.framework.dto.runner.RunnerMapVo">
        SELECT p.`id`            AS id,
               p.`name`          AS name,
               p.`url`           AS url,
               p.`access_key`    AS accessKey,
               p.`access_secret` AS accessSecret,
               p.`auth_type`     AS authType,
               p.is_delete       AS isDelete,
               p.`host`,
               p.`port`,
               rm.id             as runnerMapId
        FROM runner p
                 left join runner_map rm on p.id = rm.runner_id
        where rm.id = #{value}
    </select>

    <select id="getRunnerListByIdSet" resultType="neatlogic.framework.dto.runner.RunnerVo">
        SELECT `id`,
        `name`,
        `url`,
        `host`,
        `port`,
        `access_key` as accessKey,
        `access_secret` as accessSecret,
        `auth_type` as authType,
        `public_key` as publicKey,
        `private_key` as privateKey
        FROM `runner` r
        WHERE `id` in
        <foreach collection="runnerIdSet" open="(" separator="," close=")" item="id">
            #{id}
        </foreach>
    </select>

    <insert id="replaceRunner" parameterType="neatlogic.framework.dto.runner.RunnerVo">
        REPLACE INTO runner(
        `id`,`name`,`host`,`port` ,`url`,
        <if test="accessKey != null and accessKey !='' and isAuth ==1">
            `access_key`,
        </if>
        <if test="accessSecret != null and accessSecret !='' and isAuth ==1">
            `access_secret`,
        </if>
        <if test="authType != null and authType !='' and isAuth ==1 ">
            `auth_type`,
        </if>
        `netty_ip`, `netty_port`,
        `public_key`,`private_key`,`is_delete`
        ) VALUES(
        #{id},#{name}, #{host},#{port},#{url},
        <if test="accessKey != null and accessKey !='' ">
            #{accessKey},
        </if>
        <if test="accessSecret != null and accessSecret !='' ">
            #{accessSecret},
        </if>
        <if test="authType != null and authType !='' ">
            #{authType},
        </if>
        #{host},
        #{nettyPort},#{publicKey},#{privateKey},0
        )

    </insert>

    <insert id="insertRunnerGroupRunnerByRunnerIdListAndGroupId">
        insert into
        runnergroup_runner(runnergroup_id, runner_id) values
        <foreach collection="runnerIdList" item="runnerId" separator=",">
            ( #{groupId}, #{runnerId})
        </foreach>
    </insert>

    <delete id="deleteRunnerById">
        delete
        from runner
        where `id` = #{id}
    </delete>

    <delete id="deleteRunnerGroupRunnerByGroupId">
        delete
        from runnergroup_runner
        where `runnergroup_id` = #{groupId}
    </delete>

    <delete id="deleteRunnerGroupRunnerByRunnerId">
        delete
        from runnergroup_runner
        where `runner_id` = #{runnerId}
    </delete>

    <delete id="deleteRunnerGroupRunnerByGroupIdAndRunnerId">
        delete
        from runnergroup_runner
        where `runnergroup_id` = #{groupId}
          and `runner_id` = #{runnerId}
    </delete>

</mapper>

